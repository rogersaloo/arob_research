{"cells":[{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":7089,"status":"ok","timestamp":1639961335709,"user":{"displayName":"demore demore","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16558528897465647936"},"user_tz":-540},"id":"UOu4-VSfXzMd","outputId":"e4db84f9-dd18-48c7-ee85-43c1a114c401"},"outputs":[{"output_type":"stream","name":"stdout","text":["Collecting image_tabular\n","  Downloading image_tabular-0.0.6-py3-none-any.whl (10 kB)\n","Requirement already satisfied: torch in /usr/local/lib/python3.7/dist-packages (from image_tabular) (1.10.0+cu111)\n","Requirement already satisfied: fastai in /usr/local/lib/python3.7/dist-packages (from image_tabular) (1.0.61)\n","Requirement already satisfied: torchvision in /usr/local/lib/python3.7/dist-packages (from image_tabular) (0.11.1+cu111)\n","Requirement already satisfied: scikit-learn in /usr/local/lib/python3.7/dist-packages (from image_tabular) (1.0.1)\n","Requirement already satisfied: matplotlib in /usr/local/lib/python3.7/dist-packages (from fastai->image_tabular) (3.2.2)\n","Requirement already satisfied: numexpr in /usr/local/lib/python3.7/dist-packages (from fastai->image_tabular) (2.7.3)\n","Requirement already satisfied: Pillow in /usr/local/lib/python3.7/dist-packages (from fastai->image_tabular) (7.1.2)\n","Requirement already satisfied: bottleneck in /usr/local/lib/python3.7/dist-packages (from fastai->image_tabular) (1.3.2)\n","Requirement already satisfied: packaging in /usr/local/lib/python3.7/dist-packages (from fastai->image_tabular) (21.3)\n","Requirement already satisfied: spacy>=2.0.18 in /usr/local/lib/python3.7/dist-packages (from fastai->image_tabular) (2.2.4)\n","Requirement already satisfied: pyyaml in /usr/local/lib/python3.7/dist-packages (from fastai->image_tabular) (3.13)\n","Requirement already satisfied: nvidia-ml-py3 in /usr/local/lib/python3.7/dist-packages (from fastai->image_tabular) (7.352.0)\n","Requirement already satisfied: fastprogress>=0.2.1 in /usr/local/lib/python3.7/dist-packages (from fastai->image_tabular) (1.0.0)\n","Requirement already satisfied: pandas in /usr/local/lib/python3.7/dist-packages (from fastai->image_tabular) (1.1.5)\n","Requirement already satisfied: numpy>=1.15 in /usr/local/lib/python3.7/dist-packages (from fastai->image_tabular) (1.19.5)\n","Requirement already satisfied: scipy in /usr/local/lib/python3.7/dist-packages (from fastai->image_tabular) (1.4.1)\n","Requirement already satisfied: beautifulsoup4 in /usr/local/lib/python3.7/dist-packages (from fastai->image_tabular) (4.6.3)\n","Requirement already satisfied: requests in /usr/local/lib/python3.7/dist-packages (from fastai->image_tabular) (2.23.0)\n","Requirement already satisfied: cymem<2.1.0,>=2.0.2 in /usr/local/lib/python3.7/dist-packages (from spacy>=2.0.18->fastai->image_tabular) (2.0.6)\n","Requirement already satisfied: tqdm<5.0.0,>=4.38.0 in /usr/local/lib/python3.7/dist-packages (from spacy>=2.0.18->fastai->image_tabular) (4.62.3)\n","Requirement already satisfied: plac<1.2.0,>=0.9.6 in /usr/local/lib/python3.7/dist-packages (from spacy>=2.0.18->fastai->image_tabular) (1.1.3)\n","Requirement already satisfied: preshed<3.1.0,>=3.0.2 in /usr/local/lib/python3.7/dist-packages (from spacy>=2.0.18->fastai->image_tabular) (3.0.6)\n","Requirement already satisfied: srsly<1.1.0,>=1.0.2 in /usr/local/lib/python3.7/dist-packages (from spacy>=2.0.18->fastai->image_tabular) (1.0.5)\n","Requirement already satisfied: catalogue<1.1.0,>=0.0.7 in /usr/local/lib/python3.7/dist-packages (from spacy>=2.0.18->fastai->image_tabular) (1.0.0)\n","Requirement already satisfied: wasabi<1.1.0,>=0.4.0 in /usr/local/lib/python3.7/dist-packages (from spacy>=2.0.18->fastai->image_tabular) (0.8.2)\n","Requirement already satisfied: murmurhash<1.1.0,>=0.28.0 in /usr/local/lib/python3.7/dist-packages (from spacy>=2.0.18->fastai->image_tabular) (1.0.6)\n","Requirement already satisfied: setuptools in /usr/local/lib/python3.7/dist-packages (from spacy>=2.0.18->fastai->image_tabular) (57.4.0)\n","Requirement already satisfied: thinc==7.4.0 in /usr/local/lib/python3.7/dist-packages (from spacy>=2.0.18->fastai->image_tabular) (7.4.0)\n","Requirement already satisfied: blis<0.5.0,>=0.4.0 in /usr/local/lib/python3.7/dist-packages (from spacy>=2.0.18->fastai->image_tabular) (0.4.1)\n","Requirement already satisfied: importlib-metadata>=0.20 in /usr/local/lib/python3.7/dist-packages (from catalogue<1.1.0,>=0.0.7->spacy>=2.0.18->fastai->image_tabular) (4.8.2)\n","Requirement already satisfied: typing-extensions>=3.6.4 in /usr/local/lib/python3.7/dist-packages (from importlib-metadata>=0.20->catalogue<1.1.0,>=0.0.7->spacy>=2.0.18->fastai->image_tabular) (3.10.0.2)\n","Requirement already satisfied: zipp>=0.5 in /usr/local/lib/python3.7/dist-packages (from importlib-metadata>=0.20->catalogue<1.1.0,>=0.0.7->spacy>=2.0.18->fastai->image_tabular) (3.6.0)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.7/dist-packages (from requests->fastai->image_tabular) (2021.10.8)\n","Requirement already satisfied: urllib3!=1.25.0,!=1.25.1,<1.26,>=1.21.1 in /usr/local/lib/python3.7/dist-packages (from requests->fastai->image_tabular) (1.24.3)\n","Requirement already satisfied: idna<3,>=2.5 in /usr/local/lib/python3.7/dist-packages (from requests->fastai->image_tabular) (2.10)\n","Requirement already satisfied: chardet<4,>=3.0.2 in /usr/local/lib/python3.7/dist-packages (from requests->fastai->image_tabular) (3.0.4)\n","Requirement already satisfied: pyparsing!=2.0.4,!=2.1.2,!=2.1.6,>=2.0.1 in /usr/local/lib/python3.7/dist-packages (from matplotlib->fastai->image_tabular) (3.0.6)\n","Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.7/dist-packages (from matplotlib->fastai->image_tabular) (0.11.0)\n","Requirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.7/dist-packages (from matplotlib->fastai->image_tabular) (1.3.2)\n","Requirement already satisfied: python-dateutil>=2.1 in /usr/local/lib/python3.7/dist-packages (from matplotlib->fastai->image_tabular) (2.8.2)\n","Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.7/dist-packages (from python-dateutil>=2.1->matplotlib->fastai->image_tabular) (1.15.0)\n","Requirement already satisfied: pytz>=2017.2 in /usr/local/lib/python3.7/dist-packages (from pandas->fastai->image_tabular) (2018.9)\n","Requirement already satisfied: threadpoolctl>=2.0.0 in /usr/local/lib/python3.7/dist-packages (from scikit-learn->image_tabular) (3.0.0)\n","Requirement already satisfied: joblib>=0.11 in /usr/local/lib/python3.7/dist-packages (from scikit-learn->image_tabular) (1.1.0)\n","Installing collected packages: image-tabular\n","Successfully installed image-tabular-0.0.6\n"]}],"source":["pip install image_tabular"]},{"cell_type":"code","execution_count":2,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":531,"status":"ok","timestamp":1639961336233,"user":{"displayName":"demore demore","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16558528897465647936"},"user_tz":-540},"id":"5KkOTv9M2hB1","outputId":"b9272983-a86e-4288-ef8c-ee0c76dd9d3a"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mon Dec 20 00:48:53 2021       \n","+-----------------------------------------------------------------------------+\n","| NVIDIA-SMI 495.44       Driver Version: 460.32.03    CUDA Version: 11.2     |\n","|-------------------------------+----------------------+----------------------+\n","| GPU  Name        Persistence-M| Bus-Id        Disp.A | Volatile Uncorr. ECC |\n","| Fan  Temp  Perf  Pwr:Usage/Cap|         Memory-Usage | GPU-Util  Compute M. |\n","|                               |                      |               MIG M. |\n","|===============================+======================+======================|\n","|   0  Tesla P100-PCIE...  Off  | 00000000:00:04.0 Off |                    0 |\n","| N/A   41C    P0    27W / 250W |      0MiB / 16280MiB |      0%      Default |\n","|                               |                      |                  N/A |\n","+-------------------------------+----------------------+----------------------+\n","                                                                               \n","+-----------------------------------------------------------------------------+\n","| Processes:                                                                  |\n","|  GPU   GI   CI        PID   Type   Process name                  GPU Memory |\n","|        ID   ID                                                   Usage      |\n","|=============================================================================|\n","|  No running processes found                                                 |\n","+-----------------------------------------------------------------------------+\n"]}],"source":["gpu_info = !nvidia-smi\n","gpu_info = '\\n'.join(gpu_info)\n","if gpu_info.find('failed') >= 0:\n","  print('Select the Runtime > \"Change runtime type\" menu to enable a GPU accelerator, ')\n","  print('and then re-execute this cell.')\n","else:\n","  print(gpu_info)"]},{"cell_type":"code","execution_count":3,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":69634,"status":"ok","timestamp":1639961405860,"user":{"displayName":"demore demore","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16558528897465647936"},"user_tz":-540},"id":"wMFGhdin2ojs","outputId":"73ea5cff-361b-47fe-ca10-ce6030820c0e"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}],"source":["#Mount google drive\n","from google.colab import drive\n","drive.mount('/content/drive')"]},{"cell_type":"code","execution_count":4,"metadata":{"executionInfo":{"elapsed":30,"status":"ok","timestamp":1639961405861,"user":{"displayName":"demore demore","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16558528897465647936"},"user_tz":-540},"id":"brkO3Gvp23-D"},"outputs":[],"source":["import os\n","#set working directory\n","root_dir = \"/content/drive/My Drive/\""]},{"cell_type":"code","execution_count":5,"metadata":{"executionInfo":{"elapsed":25,"status":"ok","timestamp":1639961405862,"user":{"displayName":"demore demore","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16558528897465647936"},"user_tz":-540},"id":"l43jisVq24BB"},"outputs":[],"source":["#choose the project folder\n","project_folder = \"Colab Notebooks/chest/\""]},{"cell_type":"code","execution_count":6,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":24,"status":"ok","timestamp":1639961405863,"user":{"displayName":"demore demore","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16558528897465647936"},"user_tz":-540},"id":"g3Ok5Aae24D0","outputId":"f423c7dc-14b3-4198-bbb3-cd10db2171dc"},"outputs":[{"output_type":"stream","name":"stdout","text":["/content/drive/My Drive/Colab Notebooks/chest/did not exist and was created.\n"]}],"source":["#define a function to create and set the working directory\n","def create_and_set_working_directory(project_folder):\n","  #check if the project folder exists. if not, make one.\n","  if os.path.isdir(root_dir + project_folder) == False:\n","    os.mkdir(root_dir + project_folder)\n","\n","print(root_dir + project_folder + 'did not exist and was created.')"]},{"cell_type":"code","execution_count":7,"metadata":{"executionInfo":{"elapsed":17,"status":"ok","timestamp":1639961405863,"user":{"displayName":"demore demore","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16558528897465647936"},"user_tz":-540},"id":"fIybFgq-24Gq"},"outputs":[],"source":["#change the OS path to project folder as working directory\n","os.chdir(root_dir + project_folder)"]},{"cell_type":"code","execution_count":8,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":497,"status":"ok","timestamp":1639961406345,"user":{"displayName":"demore demore","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16558528897465647936"},"user_tz":-540},"id":"WpY4pE6k24Jd","outputId":"d6a7ab44-7070-407c-ce78-f0ea88151a1e"},"outputs":[{"output_type":"stream","name":"stdout","text":["working directory/content/drive/My Drive/Colab Notebooks/chest/empty text file created. You can also run !pwd command to confirm working directory.\n"]}],"source":["#create a test file in the working directory and see if it shows up at the right place\n","!touch 'new_file_test.txt'\n","print('working directory' + root_dir + project_folder + \\\n","      \"empty text file created. You can also run !pwd command to confirm working directory.\")"]},{"cell_type":"code","execution_count":9,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":36},"executionInfo":{"elapsed":11,"status":"ok","timestamp":1639961406345,"user":{"displayName":"demore demore","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16558528897465647936"},"user_tz":-540},"id":"KuDHi2mT3PJd","outputId":"ab2c4c06-59d7-4347-d29d-f94717574623"},"outputs":[{"output_type":"execute_result","data":{"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"},"text/plain":["'/content/drive/My Drive/Colab Notebooks/chest'"]},"metadata":{},"execution_count":9}],"source":["pwd"]},{"cell_type":"markdown","metadata":{"id":"3ndNJ4PxER1k"},"source":["## Import Library"]},{"cell_type":"code","execution_count":10,"metadata":{"executionInfo":{"elapsed":6656,"status":"ok","timestamp":1639961412991,"user":{"displayName":"demore demore","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16558528897465647936"},"user_tz":-540},"id":"8r9Rk9WXNwbX"},"outputs":[],"source":["from fastai.vision import *\n","from fastai.tabular import *\n","from image_tabular.core import *\n","from image_tabular.dataset import *\n","from image_tabular.model import *\n","from image_tabular.metric import *\n","\n","%reload_ext autoreload\n","%autoreload 2\n","%matplotlib inline\n","\n","import warnings\n","warnings.filterwarnings(\"ignore\", category=UserWarning, module=\"torch.nn.functional\")\n","\n","# use gpu by default if available\n","device = torch.device('cuda:0' if torch.cuda.is_available() else 'cpu')\n"]},{"cell_type":"code","execution_count":11,"metadata":{"executionInfo":{"elapsed":5,"status":"ok","timestamp":1639961412992,"user":{"displayName":"demore demore","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16558528897465647936"},"user_tz":-540},"id":"fK7c1AUpHRXZ"},"outputs":[],"source":["\n","import numpy as np\n","seed = 42\n","random.seed(seed)\n","np.random.seed(seed)\n","torch.manual_seed(seed)\n","torch.cuda.manual_seed_all(seed)"]},{"cell_type":"code","execution_count":12,"metadata":{"executionInfo":{"elapsed":5,"status":"ok","timestamp":1639961412993,"user":{"displayName":"demore demore","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16558528897465647936"},"user_tz":-540},"id":"wa6lO3goZv5S"},"outputs":[],"source":["#Set the path of the data\n","data_path = ('data/real_image/')"]},{"cell_type":"code","execution_count":13,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":1652,"status":"ok","timestamp":1639961414641,"user":{"displayName":"demore demore","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16558528897465647936"},"user_tz":-540},"id":"9fQIQc4EHT16","outputId":"216225df-c2ee-4958-b595-e15357d07a52"},"outputs":[{"output_type":"stream","name":"stdout","text":["729 183\n"]}],"source":["#Import Metadata\n","train_df = pd.read_csv(f\"{data_path}real_meta_train2.csv\")\n","test_df = pd.read_csv(f\"{data_path}real_meta_test2.csv\")\n","\n","print(len(train_df), len(test_df))"]},{"cell_type":"code","execution_count":14,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":11,"status":"ok","timestamp":1639961414642,"user":{"displayName":"demore demore","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16558528897465647936"},"user_tz":-540},"id":"AjNK5NPYa-Og","outputId":"9a8472d2-6f8c-481b-b286-8b3cba69f4cd"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["145"]},"metadata":{},"execution_count":14}],"source":["# idx for validation\n","val_idx = get_valid_index(train_df)\n","len(val_idx)"]},{"cell_type":"code","execution_count":15,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"executionInfo":{"elapsed":9,"status":"ok","timestamp":1639961414643,"user":{"displayName":"demore demore","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16558528897465647936"},"user_tz":-540},"id":"Lcb_8tJ-FedD","outputId":"78a33c90-ff36-4019-84a5-1407c8d296fa"},"outputs":[{"output_type":"execute_result","data":{"text/html":["\n","  <div id=\"df-e76f45b7-00e8-48ae-8b92-54702398143e\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Image Index</th>\n","      <th>Patient Age</th>\n","      <th>Patient Gender</th>\n","      <th>label</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>00000199_000.png</td>\n","      <td>55</td>\n","      <td>1</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>00000952_000.png</td>\n","      <td>50</td>\n","      <td>1</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>00025551_000.png</td>\n","      <td>59</td>\n","      <td>1</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>00000900_000.png</td>\n","      <td>59</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>00000755_000.png</td>\n","      <td>52</td>\n","      <td>1</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e76f45b7-00e8-48ae-8b92-54702398143e')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-e76f45b7-00e8-48ae-8b92-54702398143e button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-e76f45b7-00e8-48ae-8b92-54702398143e');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "],"text/plain":["        Image Index  Patient Age  Patient Gender  label\n","0  00000199_000.png           55               1      0\n","1  00000952_000.png           50               1      0\n","2  00025551_000.png           59               1      1\n","3  00000900_000.png           59               0      0\n","4  00000755_000.png           52               1      0"]},"metadata":{},"execution_count":15}],"source":["train_df.head()"]},{"cell_type":"markdown","metadata":{"id":"2TXVBEQZaGLa"},"source":["## Hyperparams\n","  "]},{"cell_type":"code","execution_count":16,"metadata":{"executionInfo":{"elapsed":7,"status":"ok","timestamp":1639961414643,"user":{"displayName":"demore demore","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16558528897465647936"},"user_tz":-540},"id":"VXCr0T-uaF0q"},"outputs":[],"source":["tfms = get_transforms(flip_vert=False)\n","size = 256\n","bs = 64"]},{"cell_type":"markdown","metadata":{"id":"uz3CQNeIEplO"},"source":["## Load Image and Tabular data"]},{"cell_type":"code","execution_count":17,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":24572,"status":"ok","timestamp":1639961439208,"user":{"displayName":"demore demore","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16558528897465647936"},"user_tz":-540},"id":"aAuSOQqdIuZK","outputId":"2871a362-8f92-4f19-c165-3acde2046c3f"},"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/fastai/vision/transform.py:247: UserWarning: torch.solve is deprecated in favor of torch.linalg.solveand will be removed in a future PyTorch release.\n","torch.linalg.solve has its arguments reversed and does not return the LU factorization.\n","To get the LU factorization see torch.lu, which can be used with torch.lu_solve or torch.lu_unpack.\n","X = torch.solve(B, A).solution\n","should be replaced with\n","X = torch.linalg.solve(A, B) (Triggered internally at  ../aten/src/ATen/native/BatchLinearAlgebra.cpp:766.)\n","  return _solve_func(B,A)[0][:,0]\n"]},{"output_type":"execute_result","data":{"text/plain":["LabelLists;\n","\n","Train: LabelList (584 items)\n","x: ImageList\n","Image (3, 256, 256),Image (3, 256, 256),Image (3, 256, 256),Image (3, 256, 256),Image (3, 256, 256)\n","y: CategoryList\n","0,1,0,0,0\n","Path: data/real_image;\n","\n","Valid: LabelList (145 items)\n","x: ImageList\n","Image (3, 256, 256),Image (3, 256, 256),Image (3, 256, 256),Image (3, 256, 256),Image (3, 256, 256)\n","y: CategoryList\n","0,0,0,0,0\n","Path: data/real_image;\n","\n","Test: LabelList (183 items)\n","x: ImageList\n","Image (3, 256, 256),Image (3, 256, 256),Image (3, 256, 256),Image (3, 256, 256),Image (3, 256, 256)\n","y: EmptyLabelList\n",",,,,\n","Path: data/real_image"]},"metadata":{},"execution_count":17}],"source":["# load image data using train_df and prepare fastai LabelLists\n","image_data = (ImageList.from_df(train_df, path=data_path, cols=\"Image Index\",\n","                               folder=\"real_image_train\")\n","              .split_by_idx(val_idx)\n","              .label_from_df(cols=\"label\")\n","              .transform(tfms, size=size))\n","\n","\n","# add test data so that we can make predictions\n","test_image_data = ImageList.from_df(test_df, path=data_path, cols=\"Image Index\",\n","                                    folder=\"real_image_test\")\n","image_data.add_test(test_image_data)"]},{"cell_type":"code","execution_count":18,"metadata":{"executionInfo":{"elapsed":34,"status":"ok","timestamp":1639961439209,"user":{"displayName":"demore demore","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16558528897465647936"},"user_tz":-540},"id":"VPh3NW7ILAZr"},"outputs":[],"source":["#Declare vars\n","dep_var = 'label'\n","cat_names = ['Patient Gender']\n","cont_names = ['Patient Age']\n","procs = [FillMissing, Categorify, Normalize]"]},{"cell_type":"code","execution_count":19,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":31,"status":"ok","timestamp":1639961439209,"user":{"displayName":"demore demore","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16558528897465647936"},"user_tz":-540},"id":"bVHFiDxCuCEJ","outputId":"6b4f4aa7-6838-40c4-bfee-77c8cb318191"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["LabelLists;\n","\n","Train: LabelList (584 items)\n","x: TabularList\n","Patient Gender 1; Patient Age 0.2751; ,Patient Gender 1; Patient Age 0.5119; ,Patient Gender 0; Patient Age 0.5119; ,Patient Gender 1; Patient Age 0.0974; ,Patient Gender 1; Patient Age 0.6895; \n","y: CategoryList\n","0,1,0,0,0\n","Path: data/real_image;\n","\n","Valid: LabelList (145 items)\n","x: TabularList\n","Patient Gender 1; Patient Age -0.2578; ,Patient Gender 0; Patient Age -0.5539; ,Patient Gender 1; Patient Age 0.0382; ,Patient Gender 0; Patient Age 0.0382; ,Patient Gender 0; Patient Age 1.1632; \n","y: CategoryList\n","0,0,0,0,0\n","Path: data/real_image;\n","\n","Test: LabelList (183 items)\n","x: TabularList\n","Patient Gender 0; Patient Age -0.0802; ,Patient Gender 0; Patient Age 1.1632; ,Patient Gender 0; Patient Age 0.0974; ,Patient Gender 1; Patient Age 0.6895; ,Patient Gender 1; Patient Age 0.2159; \n","y: EmptyLabelList\n",",,,,\n","Path: data/real_image"]},"metadata":{},"execution_count":19}],"source":["#Tabular data train\n","tab_data = (TabularList.from_df(train_df, path=data_path, cat_names=cat_names, \n","                                cont_names=cont_names, procs=procs)\n","                           .split_by_idx(val_idx)\n","                           .label_from_df(cols=dep_var))\n","\n","#Tabular data test\n","tab_data.add_test(TabularList.from_df(test_df, cat_names=cat_names, cont_names=cont_names,\n","                                      processor = tab_data.train.x.processor))\n"]},{"cell_type":"code","execution_count":20,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":27,"status":"ok","timestamp":1639961439209,"user":{"displayName":"demore demore","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16558528897465647936"},"user_tz":-540},"id":"X_673HcXHUOs","outputId":"c39010d6-91b4-4726-b884-ee6b8a92312f"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["LabelLists;\n","\n","Train: LabelList (584 items)\n","x: TabularList\n","Patient Gender 1; Patient Age 0.2751; ,Patient Gender 1; Patient Age 0.5119; ,Patient Gender 0; Patient Age 0.5119; ,Patient Gender 1; Patient Age 0.0974; ,Patient Gender 1; Patient Age 0.6895; \n","y: CategoryList\n","0,1,0,0,0\n","Path: data/real_image;\n","\n","Valid: LabelList (145 items)\n","x: TabularList\n","Patient Gender 1; Patient Age -0.2578; ,Patient Gender 0; Patient Age -0.5539; ,Patient Gender 1; Patient Age 0.0382; ,Patient Gender 0; Patient Age 0.0382; ,Patient Gender 0; Patient Age 1.1632; \n","y: CategoryList\n","0,0,0,0,0\n","Path: data/real_image;\n","\n","Test: LabelList (183 items)\n","x: TabularList\n","Patient Gender 0; Patient Age -0.0802; ,Patient Gender 0; Patient Age 1.1632; ,Patient Gender 0; Patient Age 0.0974; ,Patient Gender 1; Patient Age 0.6895; ,Patient Gender 1; Patient Age 0.2159; \n","y: EmptyLabelList\n",",,,,\n","Path: data/real_image"]},"metadata":{},"execution_count":20}],"source":["tab_data\n"]},{"cell_type":"code","execution_count":21,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":291},"executionInfo":{"elapsed":935,"status":"ok","timestamp":1639961440124,"user":{"displayName":"demore demore","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16558528897465647936"},"user_tz":-540},"id":"dUEfH4kiuCBg","outputId":"86994722-316a-4bb4-878a-7914a37b6ddb"},"outputs":[{"output_type":"stream","name":"stdout","text":["0\n"]},{"output_type":"execute_result","data":{"image/png":"\n","image/jpeg":"\n","text/plain":["Image (3, 256, 256)"]},"metadata":{},"execution_count":21}],"source":["# show one example image\n","print(image_data.train[0][1])\n","image_data.train[0][0]"]},{"cell_type":"code","execution_count":21,"metadata":{"executionInfo":{"elapsed":11,"status":"ok","timestamp":1639961440125,"user":{"displayName":"demore demore","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16558528897465647936"},"user_tz":-540},"id":"la3T3HHbG_er"},"outputs":[],"source":[""]},{"cell_type":"markdown","metadata":{"id":"iCjIfXTJHAKS"},"source":["## Intgrate\n"]},{"cell_type":"code","execution_count":22,"metadata":{"executionInfo":{"elapsed":10,"status":"ok","timestamp":1639961440125,"user":{"displayName":"demore demore","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16558528897465647936"},"user_tz":-540},"id":"MMLTS--uMITE"},"outputs":[],"source":["#Integrate image and tabular data\n","integrate_train, integrate_valid, integrate_test = get_imagetabdatasets(image_data, tab_data)"]},{"cell_type":"code","execution_count":23,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":11,"status":"ok","timestamp":1639961440126,"user":{"displayName":"demore demore","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16558528897465647936"},"user_tz":-540},"id":"0vQukqvlPQUZ","outputId":"ed9d95c8-ba1f-4128-ff85-d78827461a40"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["DataBunch;\n","\n","Train: <image_tabular.dataset.ImageTabDataset object at 0x7f007330d310>;\n","\n","Valid: <image_tabular.dataset.ImageTabDataset object at 0x7f007330d610>;\n","\n","Test: <image_tabular.dataset.ImageTabDataset object at 0x7f007330d590>"]},"metadata":{},"execution_count":23}],"source":["# package train, valid, and test datasets into a fastai databunch\n","db = DataBunch.create(integrate_train, integrate_valid, integrate_test,\n","                      path=data_path, bs=bs)\n","db"]},{"cell_type":"code","execution_count":24,"metadata":{"executionInfo":{"elapsed":9,"status":"ok","timestamp":1639961440126,"user":{"displayName":"demore demore","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16558528897465647936"},"user_tz":-540},"id":"CyFwcb8TPQXE"},"outputs":[],"source":["# image normalization with imagenet_stats\n","db.norm, db.denorm = normalize_funcs_image_tab(*imagenet_stats)\n","db.add_tfm(db.norm)"]},{"cell_type":"markdown","metadata":{"id":"4yZpTw-IgOHz"},"source":["## CNN Model"]},{"cell_type":"code","execution_count":25,"metadata":{"executionInfo":{"elapsed":9,"status":"ok","timestamp":1639961440127,"user":{"displayName":"demore demore","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16558528897465647936"},"user_tz":-540},"id":"-nngKA3CPw1K"},"outputs":[],"source":["#Model that trains on image and tabular data simultaneously\n","# cnn model for images, use Resnet50 as an example\n","cnn_arch = models.vgg16_bn\n","\n","# cnn_out_sz is the output size of the cnn model that will be concatenated with tabular model output\n","cnn_out_sz = 256"]},{"cell_type":"code","execution_count":26,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":67,"referenced_widgets":["c8152ee9b5bb47efb76710f1f758662b","5104ae7857c5400fab4fcf9bcde6e3bd","56d9ce1be85f453fa316c9141d4c4b26","6649f5ec68024535ac2a6990052b1cc1","0d5d8e46d40443b886d684afa27d6ee7","d7c77557d8264f2ca1bb70fd677df6bd","54c76231f552440db32efd18ba2b1511","18016656c8de42939b7fad2436f160fb","3340252862a146b0b9ae0f078edbffe3","580fb5b4b10f428b834d6fbe99db0b27","3f8f0a804ecc43018a1633725b299e4c"]},"executionInfo":{"elapsed":20396,"status":"ok","timestamp":1639961460514,"user":{"displayName":"demore demore","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16558528897465647936"},"user_tz":-540},"id":"61hAG4tyveRD","outputId":"92e4a9b6-355a-4f75-80ac-667c02995560"},"outputs":[{"output_type":"stream","name":"stderr","text":["Downloading: \"https://download.pytorch.org/models/vgg16_bn-6c64b313.pth\" to /root/.cache/torch/hub/checkpoints/vgg16_bn-6c64b313.pth\n"]},{"output_type":"display_data","data":{"application/vnd.jupyter.widget-view+json":{"model_id":"c8152ee9b5bb47efb76710f1f758662b","version_minor":0,"version_major":2},"text/plain":["  0%|          | 0.00/528M [00:00<?, ?B/s]"]},"metadata":{}}],"source":["image_data_db = image_data.databunch()\n","image_data_db.c = cnn_out_sz\n","cnn_learn = cnn_learner(image_data_db, cnn_arch, ps=0.2)\n","cnn_model = cnn_learn.model"]},{"cell_type":"markdown","metadata":{"id":"-Wiex9KEi8K8"},"source":["## Tabular ann\n"]},{"cell_type":"code","execution_count":27,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":52,"status":"ok","timestamp":1639961460515,"user":{"displayName":"demore demore","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16558528897465647936"},"user_tz":-540},"id":"j9n0df--QK_I","outputId":"67667e76-78a7-423d-db4e-7385ffd46777"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["TabularModel(\n","  (embeds): ModuleList(\n","    (0): Embedding(3, 3)\n","  )\n","  (emb_drop): Dropout(p=0.0, inplace=False)\n","  (bn_cont): BatchNorm1d(1, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","  (layers): Sequential(\n","    (0): Linear(in_features=4, out_features=8, bias=True)\n","    (1): ReLU(inplace=True)\n","    (2): BatchNorm1d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","    (3): Dropout(p=0.2, inplace=False)\n","    (4): Linear(in_features=8, out_features=8, bias=True)\n","  )\n",")"]},"metadata":{},"execution_count":27}],"source":["# get embedding sizes of categorical data\n","emb_szs = tab_data.train.get_emb_szs()\n","\n","# output size of the tabular model that will be concatenated with cnn model output\n","tab_out_sz = 8\n","\n","# use fastai functions to get a tabular model\n","tabular_model = TabularModel(emb_szs, len(cont_names), out_sz=tab_out_sz, layers=[8], ps=0.2)\n","tabular_model"]},{"cell_type":"code","execution_count":28,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":45,"status":"ok","timestamp":1639961460516,"user":{"displayName":"demore demore","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16558528897465647936"},"user_tz":-540},"id":"LBj1Zt7nkGGR","outputId":"1bfa962f-3374-446f-ba5c-b6e405bbac96"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["1"]},"metadata":{},"execution_count":28}],"source":["len(cont_names)"]},{"cell_type":"code","execution_count":29,"metadata":{"executionInfo":{"elapsed":39,"status":"ok","timestamp":1639961460517,"user":{"displayName":"demore demore","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16558528897465647936"},"user_tz":-540},"id":"rFNjATyXQlQq"},"outputs":[],"source":["# get an integrated model that combines the two components and concatenate their outputs\n","# which will pass through additional fully connected layers\n","integrate_model = CNNTabularModel(cnn_model,\n","                                  tabular_model,\n","                                  layers = [cnn_out_sz + tab_out_sz, bs],\n","                                  ps=0.2,\n","                                  out_sz=2).to(device)"]},{"cell_type":"code","execution_count":30,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":190},"executionInfo":{"elapsed":535,"status":"error","timestamp":1639961461014,"user":{"displayName":"demore demore","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16558528897465647936"},"user_tz":-540},"id":"u9jP7elrUoO9","outputId":"5858b03f-2f37-44cb-9acb-86ce75cbdbbe"},"outputs":[{"output_type":"error","ename":"NameError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-30-2e28ae7937b1>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m# check model output dimension, should be (bs, 2)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mintegrate_model\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mNameError\u001b[0m: name 'x' is not defined"]}],"source":["# # check model output dimension, should be (bs, 2)\n","# integrate_model(*x).shape"]},{"cell_type":"code","execution_count":31,"metadata":{"executionInfo":{"elapsed":517,"status":"ok","timestamp":1639961515811,"user":{"displayName":"demore demore","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16558528897465647936"},"user_tz":-540},"id":"U4dsIg5XQydi"},"outputs":[],"source":["# # adjust loss function weight because the dataset is extremely unbalanced\n","# weights = [1/(1-train_df[\"label\"].mean()), 1/train_df[\"label\"].mean()]\n","# loss_func = CrossEntropyFlat(weight=torch.FloatTensor(weights).to(device))\n","loss_func = CrossEntropyFlat()"]},{"cell_type":"code","execution_count":32,"metadata":{"executionInfo":{"elapsed":432,"status":"ok","timestamp":1639961519614,"user":{"displayName":"demore demore","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16558528897465647936"},"user_tz":-540},"id":"-YLBE_WjQ5FI"},"outputs":[],"source":["# package everything in a fastai learner, add auc roc score as a metric\n","learn = Learner(db, integrate_model, metrics=[accuracy,Precision(),Recall(),ROCAUC()], loss_func=loss_func,callback_fns=ShowGraph)"]},{"cell_type":"code","execution_count":33,"metadata":{"executionInfo":{"elapsed":362,"status":"ok","timestamp":1639961523842,"user":{"displayName":"demore demore","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16558528897465647936"},"user_tz":-540},"id":"cs4kjKh2Q_K5"},"outputs":[],"source":["# organize layer groups in order to use differential learning rates provided by fastai\n","# the first two layer groups are earlier layers of resnet\n","# the last layer group consists of the fully connected layers of cnn model, tabular model,\n","# and final fully connected layers for the concatenated data\n","# learn.layer_groups = [nn.Sequential(*flatten_model(cnn_learn.layer_groups[0])),\n","#                       nn.Sequential(*flatten_model(cnn_learn.layer_groups[1])),\n","#                       nn.Sequential(*(flatten_model(cnn_learn.layer_groups[2]) +\n","#                                       flatten_model(integrate_model.tabular_model) +\n","#                                       flatten_model(integrate_model.layers)))]"]},{"cell_type":"code","execution_count":34,"metadata":{"executionInfo":{"elapsed":6,"status":"ok","timestamp":1639961525459,"user":{"displayName":"demore demore","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16558528897465647936"},"user_tz":-540},"id":"9eg92dZyRCyA"},"outputs":[],"source":["# # find learning rate to train the last layer group first \n","# learn.lr_find()\n","# learn.recorder.plot(suggestion = True)"]},{"cell_type":"code","execution_count":35,"metadata":{"executionInfo":{"elapsed":2,"status":"ok","timestamp":1639961527323,"user":{"displayName":"demore demore","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16558528897465647936"},"user_tz":-540},"id":"ugeB1rjBrePx"},"outputs":[],"source":["# #Access learning exact learning rate\n","# min_grad_lr = learn.recorder.min_grad_lr\n","# min_grad_lr"]},{"cell_type":"code","execution_count":36,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"CEDVqiLU-vyp","executionInfo":{"status":"ok","timestamp":1639962576407,"user_tz":-540,"elapsed":1047059,"user":{"displayName":"demore demore","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16558528897465647936"}},"outputId":"3d7c9f8e-34fe-47ca-a45b-46e490904407"},"outputs":[{"output_type":"display_data","data":{"text/html":["<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: left;\">\n","      <th>epoch</th>\n","      <th>train_loss</th>\n","      <th>valid_loss</th>\n","      <th>accuracy</th>\n","      <th>precision</th>\n","      <th>recall</th>\n","      <th>rocauc</th>\n","      <th>time</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <td>0</td>\n","      <td>0.813771</td>\n","      <td>0.726395</td>\n","      <td>0.344828</td>\n","      <td>0.231405</td>\n","      <td>0.933333</td>\n","      <td>0.600000</td>\n","      <td>01:07</td>\n","    </tr>\n","    <tr>\n","      <td>1</td>\n","      <td>0.778825</td>\n","      <td>0.695330</td>\n","      <td>0.517241</td>\n","      <td>0.267442</td>\n","      <td>0.766667</td>\n","      <td>0.694783</td>\n","      <td>01:07</td>\n","    </tr>\n","    <tr>\n","      <td>2</td>\n","      <td>0.749238</td>\n","      <td>0.647504</td>\n","      <td>0.627586</td>\n","      <td>0.318182</td>\n","      <td>0.700000</td>\n","      <td>0.710145</td>\n","      <td>01:06</td>\n","    </tr>\n","    <tr>\n","      <td>3</td>\n","      <td>0.717797</td>\n","      <td>0.661393</td>\n","      <td>0.620690</td>\n","      <td>0.333333</td>\n","      <td>0.833333</td>\n","      <td>0.787826</td>\n","      <td>01:15</td>\n","    </tr>\n","    <tr>\n","      <td>4</td>\n","      <td>0.681011</td>\n","      <td>0.662486</td>\n","      <td>0.606897</td>\n","      <td>0.333333</td>\n","      <td>0.900000</td>\n","      <td>0.812174</td>\n","      <td>02:09</td>\n","    </tr>\n","    <tr>\n","      <td>5</td>\n","      <td>0.642101</td>\n","      <td>0.634767</td>\n","      <td>0.648276</td>\n","      <td>0.360000</td>\n","      <td>0.900000</td>\n","      <td>0.820870</td>\n","      <td>02:07</td>\n","    </tr>\n","    <tr>\n","      <td>6</td>\n","      <td>0.613923</td>\n","      <td>0.566689</td>\n","      <td>0.710345</td>\n","      <td>0.400000</td>\n","      <td>0.800000</td>\n","      <td>0.847536</td>\n","      <td>02:05</td>\n","    </tr>\n","    <tr>\n","      <td>7</td>\n","      <td>0.584384</td>\n","      <td>0.551383</td>\n","      <td>0.737931</td>\n","      <td>0.433333</td>\n","      <td>0.866667</td>\n","      <td>0.861159</td>\n","      <td>02:00</td>\n","    </tr>\n","    <tr>\n","      <td>8</td>\n","      <td>0.567839</td>\n","      <td>0.553429</td>\n","      <td>0.744828</td>\n","      <td>0.440678</td>\n","      <td>0.866667</td>\n","      <td>0.866957</td>\n","      <td>02:03</td>\n","    </tr>\n","    <tr>\n","      <td>9</td>\n","      <td>0.552092</td>\n","      <td>0.558165</td>\n","      <td>0.744828</td>\n","      <td>0.440678</td>\n","      <td>0.866667</td>\n","      <td>0.867826</td>\n","      <td>02:18</td>\n","    </tr>\n","  </tbody>\n","</table>"],"text/plain":["<IPython.core.display.HTML object>"]},"metadata":{}},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{}},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x1152 with 4 Axes>"]},"metadata":{"needs_background":"light"}}],"source":["# train\n","seed = 42\n","random.seed(seed)\n","np.random.seed(seed)\n","torch.manual_seed(seed)\n","torch.cuda.manual_seed_all(seed)\n","learn.fit_one_cycle(10, 0.001)\n","learn.recorder.plot_metrics()"]},{"cell_type":"code","execution_count":null,"metadata":{"executionInfo":{"elapsed":509,"status":"aborted","timestamp":1639961461012,"user":{"displayName":"demore demore","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16558528897465647936"},"user_tz":-540},"id":"4JsisBYs-0sP"},"outputs":[],"source":["# # unfreeze all layer groups to train the entire model using differential learning rates\n","# learn.unfreeze()\n","# learn.fit_one_cycle(15, slice(1e-4, 1e-2))\n","# learn.recorder.plot_metrics()"]},{"cell_type":"code","source":["#Confusion Matrix\n","from fastai.train import ClassificationInterpretation\n","interp = ClassificationInterpretation.from_learner(learn)\n"],"metadata":{"id":"IRNf_VYkPAs2","colab":{"base_uri":"https://localhost:8080/","height":16},"executionInfo":{"status":"ok","timestamp":1639966986343,"user_tz":-540,"elapsed":10322,"user":{"displayName":"demore demore","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16558528897465647936"}},"outputId":"51bbe1ee-6edd-4bd2-8cbc-b9f60ecdc692"},"execution_count":44,"outputs":[{"output_type":"display_data","data":{"text/html":[""],"text/plain":["<IPython.core.display.HTML object>"]},"metadata":{}}]},{"cell_type":"code","source":["losses, idxs = interp.top_losses()\n","len(db.valid_ds)==len(losses)==len(idxs)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Zk2uLzcjpm-S","executionInfo":{"status":"ok","timestamp":1639967014490,"user_tz":-540,"elapsed":553,"user":{"displayName":"demore demore","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16558528897465647936"}},"outputId":"49b99550-ad67-4b85-b541-0dd73340f4f3"},"execution_count":45,"outputs":[{"output_type":"execute_result","data":{"text/plain":["True"]},"metadata":{},"execution_count":45}]},{"cell_type":"code","source":["interp.plot_confusion_matrix()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":325},"id":"b3DyV1gEptTQ","executionInfo":{"status":"error","timestamp":1639967087974,"user_tz":-540,"elapsed":465,"user":{"displayName":"demore demore","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16558528897465647936"}},"outputId":"df79ce6e-bd63-489c-96a0-55b8f5ed4413"},"execution_count":48,"outputs":[{"output_type":"error","ename":"AttributeError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)","\u001b[0;32m<ipython-input-48-ab4f144f3c10>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0minterp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mplot_confusion_matrix\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/fastai/train.py\u001b[0m in \u001b[0;36mplot_confusion_matrix\u001b[0;34m(self, normalize, title, cmap, slice_size, norm_dec, plot_txt, return_fig, **kwargs)\u001b[0m\n\u001b[1;32m    193\u001b[0m         \u001b[0;34m\"Plot the confusion matrix, with `title` and using `cmap`.\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    194\u001b[0m         \u001b[0;31m# This function is mainly copied from the sklearn docs\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 195\u001b[0;31m         \u001b[0mcm\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mconfusion_matrix\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mslice_size\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mslice_size\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    196\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mnormalize\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mcm\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcm\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mastype\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'float'\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m/\u001b[0m \u001b[0mcm\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msum\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnewaxis\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    197\u001b[0m         \u001b[0mfig\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfigure\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/fastai/train.py\u001b[0m in \u001b[0;36mconfusion_matrix\u001b[0;34m(self, slice_size)\u001b[0m\n\u001b[1;32m    179\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mconfusion_matrix\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mslice_size\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0mint\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    180\u001b[0m         \u001b[0;34m\"Confusion matrix as an `np.ndarray`.\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 181\u001b[0;31m         \u001b[0mx\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mtorch\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0marange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mc\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    182\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mslice_size\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mcm\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpred_class\u001b[0m\u001b[0;34m==\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m&\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0my_true\u001b[0m\u001b[0;34m==\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msum\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    183\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/fastai/basic_data.py\u001b[0m in \u001b[0;36m__getattr__\u001b[0;34m(self, k)\u001b[0m\n\u001b[1;32m    120\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mcls\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0mdls\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mpath\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mpath\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdevice\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdevice\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdl_tfms\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdl_tfms\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcollate_fn\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcollate_fn\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mno_check\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mno_check\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    121\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 122\u001b[0;31m     \u001b[0;32mdef\u001b[0m \u001b[0m__getattr__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mk\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0mint\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m->\u001b[0m\u001b[0mAny\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0;32mreturn\u001b[0m \u001b[0mgetattr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtrain_dl\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mk\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    123\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m__setstate__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0mAny\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__dict__\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mupdate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    124\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/fastai/basic_data.py\u001b[0m in \u001b[0;36m__getattr__\u001b[0;34m(self, k)\u001b[0m\n\u001b[1;32m     36\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     37\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m__len__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m->\u001b[0m\u001b[0mint\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0;32mreturn\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdl\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 38\u001b[0;31m     \u001b[0;32mdef\u001b[0m \u001b[0m__getattr__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mk\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0mstr\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m->\u001b[0m\u001b[0mAny\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0;32mreturn\u001b[0m \u001b[0mgetattr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdl\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mk\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     39\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m__setstate__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0mAny\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__dict__\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mupdate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     40\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/fastai/basic_data.py\u001b[0m in \u001b[0;36mDataLoader___getattr__\u001b[0;34m(dl, k)\u001b[0m\n\u001b[1;32m     18\u001b[0m \u001b[0mtorch\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mutils\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mDataLoader\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__init__\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mintercept_args\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     19\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 20\u001b[0;31m \u001b[0;32mdef\u001b[0m \u001b[0mDataLoader___getattr__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdl\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mk\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0mstr\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m->\u001b[0m\u001b[0mAny\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0;32mreturn\u001b[0m \u001b[0mgetattr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdl\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdataset\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mk\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     21\u001b[0m \u001b[0mDataLoader\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__getattr__\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mDataLoader___getattr__\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     22\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/torch/utils/data/dataset.py\u001b[0m in \u001b[0;36m__getattr__\u001b[0;34m(self, attribute_name)\u001b[0m\n\u001b[1;32m     81\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mfunction\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     82\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 83\u001b[0;31m             \u001b[0;32mraise\u001b[0m \u001b[0mAttributeError\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     84\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     85\u001b[0m     \u001b[0;34m@\u001b[0m\u001b[0mclassmethod\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mAttributeError\u001b[0m: "]}]},{"cell_type":"code","source":["#Confusion Matrix\n","upp, low = interp.confusion_matrix()\n","tn, fp = upp[0], upp[1]\n","fn, tp = low[0], low[1]\n","print(tn, fp, fn, tp)"],"metadata":{"id":"JdV5oh05Q4Bk","colab":{"base_uri":"https://localhost:8080/","height":398},"executionInfo":{"status":"error","timestamp":1639963506899,"user_tz":-540,"elapsed":1103,"user":{"displayName":"demore demore","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16558528897465647936"}},"outputId":"be7e888c-4248-4b46-d1c5-496c8544aff6"},"execution_count":40,"outputs":[{"output_type":"error","ename":"AttributeError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)","\u001b[0;32m<ipython-input-40-1a7513617f64>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m#Confusion Matrix\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mupp\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlow\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0minterp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mconfusion_matrix\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m \u001b[0mtn\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfp\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mupp\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mupp\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0mfn\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtp\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlow\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlow\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtn\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfp\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfn\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtp\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/fastai/train.py\u001b[0m in \u001b[0;36mconfusion_matrix\u001b[0;34m(self, slice_size)\u001b[0m\n\u001b[1;32m    179\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mconfusion_matrix\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mslice_size\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0mint\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    180\u001b[0m         \u001b[0;34m\"Confusion matrix as an `np.ndarray`.\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 181\u001b[0;31m         \u001b[0mx\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mtorch\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0marange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mc\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    182\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mslice_size\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mcm\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpred_class\u001b[0m\u001b[0;34m==\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m&\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0my_true\u001b[0m\u001b[0;34m==\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msum\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    183\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/fastai/basic_data.py\u001b[0m in \u001b[0;36m__getattr__\u001b[0;34m(self, k)\u001b[0m\n\u001b[1;32m    120\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mcls\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0mdls\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mpath\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mpath\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdevice\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdevice\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdl_tfms\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdl_tfms\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcollate_fn\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcollate_fn\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mno_check\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mno_check\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    121\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 122\u001b[0;31m     \u001b[0;32mdef\u001b[0m \u001b[0m__getattr__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mk\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0mint\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m->\u001b[0m\u001b[0mAny\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0;32mreturn\u001b[0m \u001b[0mgetattr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtrain_dl\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mk\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    123\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m__setstate__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0mAny\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__dict__\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mupdate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    124\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/fastai/basic_data.py\u001b[0m in \u001b[0;36m__getattr__\u001b[0;34m(self, k)\u001b[0m\n\u001b[1;32m     36\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     37\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m__len__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m->\u001b[0m\u001b[0mint\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0;32mreturn\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdl\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 38\u001b[0;31m     \u001b[0;32mdef\u001b[0m \u001b[0m__getattr__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mk\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0mstr\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m->\u001b[0m\u001b[0mAny\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0;32mreturn\u001b[0m \u001b[0mgetattr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdl\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mk\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     39\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m__setstate__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0mAny\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__dict__\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mupdate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     40\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/fastai/basic_data.py\u001b[0m in \u001b[0;36mDataLoader___getattr__\u001b[0;34m(dl, k)\u001b[0m\n\u001b[1;32m     18\u001b[0m \u001b[0mtorch\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mutils\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mDataLoader\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__init__\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mintercept_args\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     19\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 20\u001b[0;31m \u001b[0;32mdef\u001b[0m \u001b[0mDataLoader___getattr__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdl\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mk\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0mstr\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m->\u001b[0m\u001b[0mAny\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0;32mreturn\u001b[0m \u001b[0mgetattr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdl\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdataset\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mk\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     21\u001b[0m \u001b[0mDataLoader\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__getattr__\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mDataLoader___getattr__\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     22\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/torch/utils/data/dataset.py\u001b[0m in \u001b[0;36m__getattr__\u001b[0;34m(self, attribute_name)\u001b[0m\n\u001b[1;32m     81\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mfunction\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     82\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 83\u001b[0;31m             \u001b[0;32mraise\u001b[0m \u001b[0mAttributeError\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     84\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     85\u001b[0m     \u001b[0;34m@\u001b[0m\u001b[0mclassmethod\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mAttributeError\u001b[0m: "]}]},{"cell_type":"code","source":["#Sensitivity\n","sensitivity = tp/(tp + fn)\n","sensitivity"],"metadata":{"id":"uysWl3teRCmz","colab":{"base_uri":"https://localhost:8080/","height":208},"executionInfo":{"status":"error","timestamp":1639963516770,"user_tz":-540,"elapsed":696,"user":{"displayName":"demore demore","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16558528897465647936"}},"outputId":"452819e1-d252-4b81-cc73-6d960271c949"},"execution_count":41,"outputs":[{"output_type":"error","ename":"NameError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-41-dba98043ceea>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m#Sensitivity\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0msensitivity\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtp\u001b[0m\u001b[0;34m/\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtp\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mfn\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m \u001b[0msensitivity\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'tp' is not defined"]}]},{"cell_type":"code","source":["specificity = tn/(fp + tn)\n","specificity"],"metadata":{"id":"OCJ3C9jiShJF","colab":{"base_uri":"https://localhost:8080/","height":190},"executionInfo":{"status":"error","timestamp":1639963521345,"user_tz":-540,"elapsed":426,"user":{"displayName":"demore demore","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16558528897465647936"}},"outputId":"e3071e57-c5ef-4003-cdd2-bbdc289a516f"},"execution_count":42,"outputs":[{"output_type":"error","ename":"NameError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-42-0f1498cf0a12>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mspecificity\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtn\u001b[0m\u001b[0;34m/\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfp\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mtn\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0mspecificity\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'tn' is not defined"]}]}],"metadata":{"accelerator":"GPU","colab":{"collapsed_sections":[],"name":"real_meta_vgg16","provenance":[],"authorship_tag":"ABX9TyOOcXI4YlAlesXTK+zOgrIB"},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"},"widgets":{"application/vnd.jupyter.widget-state+json":{"c8152ee9b5bb47efb76710f1f758662b":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","model_module_version":"1.5.0","state":{"_view_name":"HBoxView","_dom_classes":[],"_model_name":"HBoxModel","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.5.0","box_style":"","layout":"IPY_MODEL_5104ae7857c5400fab4fcf9bcde6e3bd","_model_module":"@jupyter-widgets/controls","children":["IPY_MODEL_56d9ce1be85f453fa316c9141d4c4b26","IPY_MODEL_6649f5ec68024535ac2a6990052b1cc1","IPY_MODEL_0d5d8e46d40443b886d684afa27d6ee7"]}},"5104ae7857c5400fab4fcf9bcde6e3bd":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"56d9ce1be85f453fa316c9141d4c4b26":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_view_name":"HTMLView","style":"IPY_MODEL_d7c77557d8264f2ca1bb70fd677df6bd","_dom_classes":[],"description":"","_model_name":"HTMLModel","placeholder":"​","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":"100%","_view_count":null,"_view_module_version":"1.5.0","description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_54c76231f552440db32efd18ba2b1511"}},"6649f5ec68024535ac2a6990052b1cc1":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","model_module_version":"1.5.0","state":{"_view_name":"ProgressView","style":"IPY_MODEL_18016656c8de42939b7fad2436f160fb","_dom_classes":[],"description":"","_model_name":"FloatProgressModel","bar_style":"success","max":553507836,"_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":553507836,"_view_count":null,"_view_module_version":"1.5.0","orientation":"horizontal","min":0,"description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_3340252862a146b0b9ae0f078edbffe3"}},"0d5d8e46d40443b886d684afa27d6ee7":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_view_name":"HTMLView","style":"IPY_MODEL_580fb5b4b10f428b834d6fbe99db0b27","_dom_classes":[],"description":"","_model_name":"HTMLModel","placeholder":"​","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":" 528M/528M [00:05&lt;00:00, 115MB/s]","_view_count":null,"_view_module_version":"1.5.0","description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_3f8f0a804ecc43018a1633725b299e4c"}},"d7c77557d8264f2ca1bb70fd677df6bd":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_view_name":"StyleView","_model_name":"DescriptionStyleModel","description_width":"","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","_model_module":"@jupyter-widgets/controls"}},"54c76231f552440db32efd18ba2b1511":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"18016656c8de42939b7fad2436f160fb":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_view_name":"StyleView","_model_name":"ProgressStyleModel","description_width":"","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","bar_color":null,"_model_module":"@jupyter-widgets/controls"}},"3340252862a146b0b9ae0f078edbffe3":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"580fb5b4b10f428b834d6fbe99db0b27":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_view_name":"StyleView","_model_name":"DescriptionStyleModel","description_width":"","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","_model_module":"@jupyter-widgets/controls"}},"3f8f0a804ecc43018a1633725b299e4c":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}}}}},"nbformat":4,"nbformat_minor":0}