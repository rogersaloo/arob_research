{"cells":[{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":7433,"status":"ok","timestamp":1639959778819,"user":{"displayName":"demore demore","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16558528897465647936"},"user_tz":-540},"id":"UOu4-VSfXzMd","outputId":"6478fd65-6786-4f86-f0eb-5ff47c7c07ae"},"outputs":[{"output_type":"stream","name":"stdout","text":["Collecting image_tabular\n","  Downloading image_tabular-0.0.6-py3-none-any.whl (10 kB)\n","Requirement already satisfied: torch in /usr/local/lib/python3.7/dist-packages (from image_tabular) (1.10.0+cu111)\n","Requirement already satisfied: torchvision in /usr/local/lib/python3.7/dist-packages (from image_tabular) (0.11.1+cu111)\n","Requirement already satisfied: fastai in /usr/local/lib/python3.7/dist-packages (from image_tabular) (1.0.61)\n","Requirement already satisfied: scikit-learn in /usr/local/lib/python3.7/dist-packages (from image_tabular) (1.0.1)\n","Requirement already satisfied: packaging in /usr/local/lib/python3.7/dist-packages (from fastai->image_tabular) (21.3)\n","Requirement already satisfied: requests in /usr/local/lib/python3.7/dist-packages (from fastai->image_tabular) (2.23.0)\n","Requirement already satisfied: numpy>=1.15 in /usr/local/lib/python3.7/dist-packages (from fastai->image_tabular) (1.19.5)\n","Requirement already satisfied: fastprogress>=0.2.1 in /usr/local/lib/python3.7/dist-packages (from fastai->image_tabular) (1.0.0)\n","Requirement already satisfied: Pillow in /usr/local/lib/python3.7/dist-packages (from fastai->image_tabular) (7.1.2)\n","Requirement already satisfied: pyyaml in /usr/local/lib/python3.7/dist-packages (from fastai->image_tabular) (3.13)\n","Requirement already satisfied: scipy in /usr/local/lib/python3.7/dist-packages (from fastai->image_tabular) (1.4.1)\n","Requirement already satisfied: bottleneck in /usr/local/lib/python3.7/dist-packages (from fastai->image_tabular) (1.3.2)\n","Requirement already satisfied: spacy>=2.0.18 in /usr/local/lib/python3.7/dist-packages (from fastai->image_tabular) (2.2.4)\n","Requirement already satisfied: pandas in /usr/local/lib/python3.7/dist-packages (from fastai->image_tabular) (1.1.5)\n","Requirement already satisfied: beautifulsoup4 in /usr/local/lib/python3.7/dist-packages (from fastai->image_tabular) (4.6.3)\n","Requirement already satisfied: numexpr in /usr/local/lib/python3.7/dist-packages (from fastai->image_tabular) (2.7.3)\n","Requirement already satisfied: matplotlib in /usr/local/lib/python3.7/dist-packages (from fastai->image_tabular) (3.2.2)\n","Requirement already satisfied: nvidia-ml-py3 in /usr/local/lib/python3.7/dist-packages (from fastai->image_tabular) (7.352.0)\n","Requirement already satisfied: preshed<3.1.0,>=3.0.2 in /usr/local/lib/python3.7/dist-packages (from spacy>=2.0.18->fastai->image_tabular) (3.0.6)\n","Requirement already satisfied: catalogue<1.1.0,>=0.0.7 in /usr/local/lib/python3.7/dist-packages (from spacy>=2.0.18->fastai->image_tabular) (1.0.0)\n","Requirement already satisfied: tqdm<5.0.0,>=4.38.0 in /usr/local/lib/python3.7/dist-packages (from spacy>=2.0.18->fastai->image_tabular) (4.62.3)\n","Requirement already satisfied: plac<1.2.0,>=0.9.6 in /usr/local/lib/python3.7/dist-packages (from spacy>=2.0.18->fastai->image_tabular) (1.1.3)\n","Requirement already satisfied: blis<0.5.0,>=0.4.0 in /usr/local/lib/python3.7/dist-packages (from spacy>=2.0.18->fastai->image_tabular) (0.4.1)\n","Requirement already satisfied: setuptools in /usr/local/lib/python3.7/dist-packages (from spacy>=2.0.18->fastai->image_tabular) (57.4.0)\n","Requirement already satisfied: murmurhash<1.1.0,>=0.28.0 in /usr/local/lib/python3.7/dist-packages (from spacy>=2.0.18->fastai->image_tabular) (1.0.6)\n","Requirement already satisfied: srsly<1.1.0,>=1.0.2 in /usr/local/lib/python3.7/dist-packages (from spacy>=2.0.18->fastai->image_tabular) (1.0.5)\n","Requirement already satisfied: thinc==7.4.0 in /usr/local/lib/python3.7/dist-packages (from spacy>=2.0.18->fastai->image_tabular) (7.4.0)\n","Requirement already satisfied: cymem<2.1.0,>=2.0.2 in /usr/local/lib/python3.7/dist-packages (from spacy>=2.0.18->fastai->image_tabular) (2.0.6)\n","Requirement already satisfied: wasabi<1.1.0,>=0.4.0 in /usr/local/lib/python3.7/dist-packages (from spacy>=2.0.18->fastai->image_tabular) (0.8.2)\n","Requirement already satisfied: importlib-metadata>=0.20 in /usr/local/lib/python3.7/dist-packages (from catalogue<1.1.0,>=0.0.7->spacy>=2.0.18->fastai->image_tabular) (4.8.2)\n","Requirement already satisfied: zipp>=0.5 in /usr/local/lib/python3.7/dist-packages (from importlib-metadata>=0.20->catalogue<1.1.0,>=0.0.7->spacy>=2.0.18->fastai->image_tabular) (3.6.0)\n","Requirement already satisfied: typing-extensions>=3.6.4 in /usr/local/lib/python3.7/dist-packages (from importlib-metadata>=0.20->catalogue<1.1.0,>=0.0.7->spacy>=2.0.18->fastai->image_tabular) (3.10.0.2)\n","Requirement already satisfied: idna<3,>=2.5 in /usr/local/lib/python3.7/dist-packages (from requests->fastai->image_tabular) (2.10)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.7/dist-packages (from requests->fastai->image_tabular) (2021.10.8)\n","Requirement already satisfied: urllib3!=1.25.0,!=1.25.1,<1.26,>=1.21.1 in /usr/local/lib/python3.7/dist-packages (from requests->fastai->image_tabular) (1.24.3)\n","Requirement already satisfied: chardet<4,>=3.0.2 in /usr/local/lib/python3.7/dist-packages (from requests->fastai->image_tabular) (3.0.4)\n","Requirement already satisfied: pyparsing!=2.0.4,!=2.1.2,!=2.1.6,>=2.0.1 in /usr/local/lib/python3.7/dist-packages (from matplotlib->fastai->image_tabular) (3.0.6)\n","Requirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.7/dist-packages (from matplotlib->fastai->image_tabular) (1.3.2)\n","Requirement already satisfied: python-dateutil>=2.1 in /usr/local/lib/python3.7/dist-packages (from matplotlib->fastai->image_tabular) (2.8.2)\n","Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.7/dist-packages (from matplotlib->fastai->image_tabular) (0.11.0)\n","Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.7/dist-packages (from python-dateutil>=2.1->matplotlib->fastai->image_tabular) (1.15.0)\n","Requirement already satisfied: pytz>=2017.2 in /usr/local/lib/python3.7/dist-packages (from pandas->fastai->image_tabular) (2018.9)\n","Requirement already satisfied: joblib>=0.11 in /usr/local/lib/python3.7/dist-packages (from scikit-learn->image_tabular) (1.1.0)\n","Requirement already satisfied: threadpoolctl>=2.0.0 in /usr/local/lib/python3.7/dist-packages (from scikit-learn->image_tabular) (3.0.0)\n","Installing collected packages: image-tabular\n","Successfully installed image-tabular-0.0.6\n"]}],"source":["pip install image_tabular"]},{"cell_type":"code","execution_count":2,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":332,"status":"ok","timestamp":1639959786976,"user":{"displayName":"demore demore","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16558528897465647936"},"user_tz":-540},"id":"5KkOTv9M2hB1","outputId":"51aed801-99f3-477e-eba7-21e8c499387e"},"outputs":[{"output_type":"stream","name":"stdout","text":["Select the Runtime > \"Change runtime type\" menu to enable a GPU accelerator, \n","and then re-execute this cell.\n"]}],"source":["gpu_info = !nvidia-smi\n","gpu_info = '\\n'.join(gpu_info)\n","if gpu_info.find('failed') >= 0:\n","  print('Select the Runtime > \"Change runtime type\" menu to enable a GPU accelerator, ')\n","  print('and then re-execute this cell.')\n","else:\n","  print(gpu_info)"]},{"cell_type":"code","execution_count":3,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":16614,"status":"ok","timestamp":1639959807274,"user":{"displayName":"demore demore","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16558528897465647936"},"user_tz":-540},"id":"wMFGhdin2ojs","outputId":"c97b562b-420d-41ab-8a53-2054494685cd"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}],"source":["#Mount google drive\n","from google.colab import drive\n","drive.mount('/content/drive')"]},{"cell_type":"code","execution_count":4,"metadata":{"executionInfo":{"elapsed":309,"status":"ok","timestamp":1639959879847,"user":{"displayName":"demore demore","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16558528897465647936"},"user_tz":-540},"id":"brkO3Gvp23-D"},"outputs":[],"source":["import os\n","#set working directory\n","root_dir = \"/content/drive/My Drive/\""]},{"cell_type":"code","execution_count":5,"metadata":{"executionInfo":{"elapsed":332,"status":"ok","timestamp":1639959881587,"user":{"displayName":"demore demore","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16558528897465647936"},"user_tz":-540},"id":"l43jisVq24BB"},"outputs":[],"source":["#choose the project folder\n","project_folder = \"Colab Notebooks/chest/\""]},{"cell_type":"code","execution_count":6,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":5,"status":"ok","timestamp":1639959882700,"user":{"displayName":"demore demore","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16558528897465647936"},"user_tz":-540},"id":"g3Ok5Aae24D0","outputId":"92e6f723-8dbf-4bc2-b9d4-54941638523f"},"outputs":[{"output_type":"stream","name":"stdout","text":["/content/drive/My Drive/Colab Notebooks/chest/did not exist and was created.\n"]}],"source":["#define a function to create and set the working directory\n","def create_and_set_working_directory(project_folder):\n","  #check if the project folder exists. if not, make one.\n","  if os.path.isdir(root_dir + project_folder) == False:\n","    os.mkdir(root_dir + project_folder)\n","\n","print(root_dir + project_folder + 'did not exist and was created.')"]},{"cell_type":"code","execution_count":7,"metadata":{"executionInfo":{"elapsed":306,"status":"ok","timestamp":1639959884721,"user":{"displayName":"demore demore","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16558528897465647936"},"user_tz":-540},"id":"fIybFgq-24Gq"},"outputs":[],"source":["#change the OS path to project folder as working directory\n","os.chdir(root_dir + project_folder)"]},{"cell_type":"code","execution_count":8,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":698,"status":"ok","timestamp":1639959886914,"user":{"displayName":"demore demore","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16558528897465647936"},"user_tz":-540},"id":"WpY4pE6k24Jd","outputId":"48bc67ea-b205-4ff6-e735-eb29385452f0"},"outputs":[{"output_type":"stream","name":"stdout","text":["working directory/content/drive/My Drive/Colab Notebooks/chest/empty text file created. You can also run !pwd command to confirm working directory.\n"]}],"source":["#create a test file in the working directory and see if it shows up at the right place\n","!touch 'new_file_test.txt'\n","print('working directory' + root_dir + project_folder + \\\n","      \"empty text file created. You can also run !pwd command to confirm working directory.\")"]},{"cell_type":"code","execution_count":9,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":36},"executionInfo":{"elapsed":702,"status":"ok","timestamp":1639959889448,"user":{"displayName":"demore demore","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16558528897465647936"},"user_tz":-540},"id":"KuDHi2mT3PJd","outputId":"eb53a80c-6ca3-463e-97af-79da1684dbd0"},"outputs":[{"output_type":"execute_result","data":{"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"},"text/plain":["'/content/drive/My Drive/Colab Notebooks/chest'"]},"metadata":{},"execution_count":9}],"source":["pwd"]},{"cell_type":"markdown","metadata":{"id":"3ndNJ4PxER1k"},"source":["## Import Library"]},{"cell_type":"code","execution_count":10,"metadata":{"executionInfo":{"elapsed":7964,"status":"ok","timestamp":1639959898871,"user":{"displayName":"demore demore","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16558528897465647936"},"user_tz":-540},"id":"8r9Rk9WXNwbX"},"outputs":[],"source":["from fastai.vision import *\n","from fastai.tabular import *\n","from image_tabular.core import *\n","from image_tabular.dataset import *\n","from image_tabular.model import *\n","from image_tabular.metric import *\n","\n","%reload_ext autoreload\n","%autoreload 2\n","%matplotlib inline\n","\n","import warnings\n","warnings.filterwarnings(\"ignore\", category=UserWarning, module=\"torch.nn.functional\")\n","\n","# use gpu by default if available\n","device = torch.device('cuda:0' if torch.cuda.is_available() else 'cpu')\n"]},{"cell_type":"code","execution_count":11,"metadata":{"executionInfo":{"elapsed":8,"status":"ok","timestamp":1639959898872,"user":{"displayName":"demore demore","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16558528897465647936"},"user_tz":-540},"id":"fK7c1AUpHRXZ"},"outputs":[],"source":["\n","import numpy as np\n","seed = 42\n","random.seed(seed)\n","np.random.seed(seed)\n","torch.manual_seed(seed)\n","torch.cuda.manual_seed_all(seed)"]},{"cell_type":"code","execution_count":12,"metadata":{"executionInfo":{"elapsed":8,"status":"ok","timestamp":1639959898873,"user":{"displayName":"demore demore","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16558528897465647936"},"user_tz":-540},"id":"wa6lO3goZv5S"},"outputs":[],"source":["#Set the path of the data\n","data_path = ('data/synth_real_image/')"]},{"cell_type":"code","execution_count":13,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":898,"status":"ok","timestamp":1639959899764,"user":{"displayName":"demore demore","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16558528897465647936"},"user_tz":-540},"id":"9fQIQc4EHT16","outputId":"76079e85-79b3-4795-ab15-f6d88068f950"},"outputs":[{"output_type":"stream","name":"stdout","text":["1009 253\n"]}],"source":["#Import Metadata\n","train_df = pd.read_csv(f\"{data_path}train_meta_synthreal2.csv\")\n","test_df = pd.read_csv(f\"{data_path}test_meta_synthreal2.csv\")\n","\n","print(len(train_df), len(test_df))"]},{"cell_type":"code","execution_count":14,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":22,"status":"ok","timestamp":1639959899765,"user":{"displayName":"demore demore","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16558528897465647936"},"user_tz":-540},"id":"AjNK5NPYa-Og","outputId":"8c39cacf-7480-4bfd-bee5-1f0f1cd6dc78"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["201"]},"metadata":{},"execution_count":14}],"source":["# idx for validation\n","val_idx = get_valid_index(train_df)\n","len(val_idx)"]},{"cell_type":"code","execution_count":15,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"executionInfo":{"elapsed":20,"status":"ok","timestamp":1639959899767,"user":{"displayName":"demore demore","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16558528897465647936"},"user_tz":-540},"id":"Lcb_8tJ-FedD","outputId":"dd75e1e2-a255-4df5-a883-9019e7cae4b9"},"outputs":[{"output_type":"execute_result","data":{"text/html":["\n","  <div id=\"df-ae2f36dc-47c3-4a74-926f-eb08ed07bf95\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Image Index</th>\n","      <th>Patient Age</th>\n","      <th>Patient Gender</th>\n","      <th>label</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>00008376_000.png</td>\n","      <td>67.0</td>\n","      <td>F</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>00000214_000.png</td>\n","      <td>78.0</td>\n","      <td>M</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>00001003_000.png</td>\n","      <td>47.0</td>\n","      <td>M</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>00001059_000.png</td>\n","      <td>67.0</td>\n","      <td>F</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>00001008_000.png</td>\n","      <td>27.0</td>\n","      <td>M</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-ae2f36dc-47c3-4a74-926f-eb08ed07bf95')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-ae2f36dc-47c3-4a74-926f-eb08ed07bf95 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-ae2f36dc-47c3-4a74-926f-eb08ed07bf95');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "],"text/plain":["        Image Index  Patient Age Patient Gender  label\n","0  00008376_000.png         67.0              F      1\n","1  00000214_000.png         78.0              M      0\n","2  00001003_000.png         47.0              M      0\n","3  00001059_000.png         67.0              F      0\n","4  00001008_000.png         27.0              M      0"]},"metadata":{},"execution_count":15}],"source":["train_df.head()"]},{"cell_type":"markdown","metadata":{"id":"2TXVBEQZaGLa"},"source":["## Hyperparams\n","  "]},{"cell_type":"code","execution_count":16,"metadata":{"executionInfo":{"elapsed":17,"status":"ok","timestamp":1639959899768,"user":{"displayName":"demore demore","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16558528897465647936"},"user_tz":-540},"id":"VXCr0T-uaF0q"},"outputs":[],"source":["tfms = get_transforms(flip_vert=False)\n","size = 256\n","bs = 32"]},{"cell_type":"markdown","metadata":{"id":"uz3CQNeIEplO"},"source":["## Load Image and Tabular data"]},{"cell_type":"code","execution_count":17,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":7508,"status":"ok","timestamp":1639959910068,"user":{"displayName":"demore demore","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16558528897465647936"},"user_tz":-540},"id":"aAuSOQqdIuZK","outputId":"514f6a37-bd22-4371-d7b2-a470f368cf41"},"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/fastai/vision/transform.py:247: UserWarning: torch.solve is deprecated in favor of torch.linalg.solveand will be removed in a future PyTorch release.\n","torch.linalg.solve has its arguments reversed and does not return the LU factorization.\n","To get the LU factorization see torch.lu, which can be used with torch.lu_solve or torch.lu_unpack.\n","X = torch.solve(B, A).solution\n","should be replaced with\n","X = torch.linalg.solve(A, B) (Triggered internally at  ../aten/src/ATen/native/BatchLinearAlgebra.cpp:766.)\n","  return _solve_func(B,A)[0][:,0]\n"]},{"output_type":"execute_result","data":{"text/plain":["LabelLists;\n","\n","Train: LabelList (808 items)\n","x: ImageList\n","Image (3, 256, 256),Image (3, 256, 256),Image (3, 256, 256),Image (3, 256, 256),Image (3, 256, 256)\n","y: CategoryList\n","1,0,0,0,0\n","Path: data/synth_real_image;\n","\n","Valid: LabelList (201 items)\n","x: ImageList\n","Image (3, 256, 256),Image (3, 256, 256),Image (3, 256, 256),Image (3, 256, 256),Image (3, 256, 256)\n","y: CategoryList\n","0,0,0,1,0\n","Path: data/synth_real_image;\n","\n","Test: LabelList (253 items)\n","x: ImageList\n","Image (3, 256, 256),Image (3, 256, 256),Image (3, 256, 256),Image (3, 256, 256),Image (3, 256, 256)\n","y: EmptyLabelList\n",",,,,\n","Path: data/synth_real_image"]},"metadata":{},"execution_count":17}],"source":["# load image data using train_df and prepare fastai LabelLists\n","image_data = (ImageList.from_df(train_df, path=data_path, cols=\"Image Index\",\n","                               folder=\"train_img_synthreal\")\n","              .split_by_idx(val_idx)\n","              .label_from_df(cols=\"label\")\n","              .transform(tfms, size=size))\n","\n","\n","# add test data so that we can make predictions\n","test_image_data = ImageList.from_df(test_df, path=data_path, cols=\"Image Index\",\n","                                    folder=\"test_img_synthreal\")\n","image_data.add_test(test_image_data)"]},{"cell_type":"code","execution_count":18,"metadata":{"executionInfo":{"elapsed":13,"status":"ok","timestamp":1639959910070,"user":{"displayName":"demore demore","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16558528897465647936"},"user_tz":-540},"id":"VPh3NW7ILAZr"},"outputs":[],"source":["#Declare vars\n","dep_var = 'label'\n","cat_names = ['Patient Gender']\n","cont_names = ['Patient Age']\n","procs = [FillMissing, Categorify, Normalize]"]},{"cell_type":"code","execution_count":19,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":686,"status":"ok","timestamp":1639959910746,"user":{"displayName":"demore demore","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16558528897465647936"},"user_tz":-540},"id":"bVHFiDxCuCEJ","outputId":"5ced1dfa-1d56-408b-c903-ea3f71088654"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["LabelLists;\n","\n","Train: LabelList (808 items)\n","x: TabularList\n","Patient Gender F; Patient Age_na False; Patient Age 1.1113; ,Patient Gender M; Patient Age_na False; Patient Age -0.2591; ,Patient Gender F; Patient Age_na False; Patient Age 1.1113; ,Patient Gender M; Patient Age_na False; Patient Age -1.6294; ,Patient Gender M; Patient Age_na False; Patient Age 0.1520; \n","y: CategoryList\n","1,0,0,0,0\n","Path: data/synth_real_image;\n","\n","Valid: LabelList (201 items)\n","x: TabularList\n","Patient Gender M; Patient Age_na False; Patient Age 0.8372; ,Patient Gender F; Patient Age_na False; Patient Age 0.2206; ,Patient Gender F; Patient Age_na False; Patient Age -0.1220; ,Patient Gender #na#; Patient Age_na True; Patient Age 0.0835; ,Patient Gender F; Patient Age_na False; Patient Age 0.0150; \n","y: CategoryList\n","0,0,0,1,0\n","Path: data/synth_real_image;\n","\n","Test: LabelList (253 items)\n","x: TabularList\n","Patient Gender #na#; Patient Age_na True; Patient Age 0.0835; ,Patient Gender M; Patient Age_na False; Patient Age 0.0150; ,Patient Gender M; Patient Age_na False; Patient Age 1.1113; ,Patient Gender F; Patient Age_na False; Patient Age 1.1113; ,Patient Gender #na#; Patient Age_na True; Patient Age 0.0835; \n","y: EmptyLabelList\n",",,,,\n","Path: data/synth_real_image"]},"metadata":{},"execution_count":19}],"source":["#Tabular data train\n","tab_data = (TabularList.from_df(train_df, path=data_path, cat_names=cat_names, \n","                                cont_names=cont_names, procs=procs)\n","                           .split_by_idx(val_idx)\n","                           .label_from_df(cols=dep_var))\n","\n","#Tabular data test\n","tab_data.add_test(TabularList.from_df(test_df, cat_names=cat_names, cont_names=cont_names,\n","                                      processor = tab_data.train.x.processor))\n"]},{"cell_type":"code","execution_count":20,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":31,"status":"ok","timestamp":1639959910747,"user":{"displayName":"demore demore","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16558528897465647936"},"user_tz":-540},"id":"X_673HcXHUOs","outputId":"bcf7ab97-dbb5-4618-b3b8-28812b233925"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["LabelLists;\n","\n","Train: LabelList (808 items)\n","x: TabularList\n","Patient Gender F; Patient Age_na False; Patient Age 1.1113; ,Patient Gender M; Patient Age_na False; Patient Age -0.2591; ,Patient Gender F; Patient Age_na False; Patient Age 1.1113; ,Patient Gender M; Patient Age_na False; Patient Age -1.6294; ,Patient Gender M; Patient Age_na False; Patient Age 0.1520; \n","y: CategoryList\n","1,0,0,0,0\n","Path: data/synth_real_image;\n","\n","Valid: LabelList (201 items)\n","x: TabularList\n","Patient Gender M; Patient Age_na False; Patient Age 0.8372; ,Patient Gender F; Patient Age_na False; Patient Age 0.2206; ,Patient Gender F; Patient Age_na False; Patient Age -0.1220; ,Patient Gender #na#; Patient Age_na True; Patient Age 0.0835; ,Patient Gender F; Patient Age_na False; Patient Age 0.0150; \n","y: CategoryList\n","0,0,0,1,0\n","Path: data/synth_real_image;\n","\n","Test: LabelList (253 items)\n","x: TabularList\n","Patient Gender #na#; Patient Age_na True; Patient Age 0.0835; ,Patient Gender M; Patient Age_na False; Patient Age 0.0150; ,Patient Gender M; Patient Age_na False; Patient Age 1.1113; ,Patient Gender F; Patient Age_na False; Patient Age 1.1113; ,Patient Gender #na#; Patient Age_na True; Patient Age 0.0835; \n","y: EmptyLabelList\n",",,,,\n","Path: data/synth_real_image"]},"metadata":{},"execution_count":20}],"source":["tab_data\n"]},{"cell_type":"code","execution_count":21,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":291},"executionInfo":{"elapsed":23,"status":"ok","timestamp":1639959910748,"user":{"displayName":"demore demore","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16558528897465647936"},"user_tz":-540},"id":"dUEfH4kiuCBg","outputId":"a15929fa-9831-4786-9aae-6923170a398c"},"outputs":[{"output_type":"stream","name":"stdout","text":["1\n"]},{"output_type":"execute_result","data":{"image/png":"\n","image/jpeg":"\n","text/plain":["Image (3, 256, 256)"]},"metadata":{},"execution_count":21}],"source":["# show one example image\n","print(image_data.train[0][1])\n","image_data.train[0][0]"]},{"cell_type":"code","execution_count":21,"metadata":{"executionInfo":{"elapsed":13,"status":"ok","timestamp":1639959910749,"user":{"displayName":"demore demore","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16558528897465647936"},"user_tz":-540},"id":"la3T3HHbG_er"},"outputs":[],"source":[""]},{"cell_type":"markdown","metadata":{"id":"iCjIfXTJHAKS"},"source":["## Intgrate\n"]},{"cell_type":"code","execution_count":22,"metadata":{"executionInfo":{"elapsed":13,"status":"ok","timestamp":1639959910750,"user":{"displayName":"demore demore","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16558528897465647936"},"user_tz":-540},"id":"MMLTS--uMITE"},"outputs":[],"source":["#Integrate image and tabular data\n","integrate_train, integrate_valid, integrate_test = get_imagetabdatasets(image_data, tab_data)"]},{"cell_type":"code","execution_count":23,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":4,"status":"ok","timestamp":1639959911083,"user":{"displayName":"demore demore","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16558528897465647936"},"user_tz":-540},"id":"0vQukqvlPQUZ","outputId":"32cadcc0-e6e3-4858-edba-52a6a59c1c60"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["DataBunch;\n","\n","Train: <image_tabular.dataset.ImageTabDataset object at 0x7f000b62a490>;\n","\n","Valid: <image_tabular.dataset.ImageTabDataset object at 0x7f000b62a350>;\n","\n","Test: <image_tabular.dataset.ImageTabDataset object at 0x7f000b62a210>"]},"metadata":{},"execution_count":23}],"source":["# package train, valid, and test datasets into a fastai databunch\n","db = DataBunch.create(integrate_train, integrate_valid, integrate_test,\n","                      path=data_path, bs=bs)\n","db"]},{"cell_type":"code","execution_count":24,"metadata":{"executionInfo":{"elapsed":3,"status":"ok","timestamp":1639959911084,"user":{"displayName":"demore demore","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16558528897465647936"},"user_tz":-540},"id":"CyFwcb8TPQXE"},"outputs":[],"source":["# image normalization with imagenet_stats\n","db.norm, db.denorm = normalize_funcs_image_tab(*imagenet_stats)\n","db.add_tfm(db.norm)"]},{"cell_type":"markdown","metadata":{"id":"4yZpTw-IgOHz"},"source":["## CNN Model"]},{"cell_type":"code","execution_count":25,"metadata":{"executionInfo":{"elapsed":383,"status":"ok","timestamp":1639959914126,"user":{"displayName":"demore demore","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16558528897465647936"},"user_tz":-540},"id":"-nngKA3CPw1K"},"outputs":[],"source":["#Model that trains on image and tabular data simultaneously\n","# cnn model for images, use Resnet50 as an example\n","cnn_arch = models.vgg16_bn\n","\n","# cnn_out_sz is the output size of the cnn model that will be concatenated with tabular model output\n","cnn_out_sz = 256"]},{"cell_type":"code","execution_count":26,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":67,"referenced_widgets":["2236abba62f346abb32813f7f7bbf495","8f79516dfa50493f987c08375d9709a1","6a3cc8144eca4b3f9c4b822b3630cfb1","1dd62419de4847968dace50f545414b0","3784eaf1e7f044e480c5ec9b4b1dc018","4299f53a73ad4143905cfad12f6394e3","5aa611851d0d463b9f11af5b60338ab9","3e828b62453142ff9d335d24320768e2","6a23a5824701481989ebf155242fe7ee","6c850e8cfeca4d0382243ea96b9f778c","05d5209d3fa34389ab05d4591299d2da"]},"executionInfo":{"elapsed":42800,"status":"ok","timestamp":1639959958499,"user":{"displayName":"demore demore","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16558528897465647936"},"user_tz":-540},"id":"61hAG4tyveRD","outputId":"6e7fa76a-6d70-4603-8b25-8f3286bdf9a0"},"outputs":[{"output_type":"stream","name":"stderr","text":["Downloading: \"https://download.pytorch.org/models/vgg16_bn-6c64b313.pth\" to /root/.cache/torch/hub/checkpoints/vgg16_bn-6c64b313.pth\n"]},{"output_type":"display_data","data":{"application/vnd.jupyter.widget-view+json":{"model_id":"2236abba62f346abb32813f7f7bbf495","version_minor":0,"version_major":2},"text/plain":["  0%|          | 0.00/528M [00:00<?, ?B/s]"]},"metadata":{}}],"source":["image_data_db = image_data.databunch()\n","image_data_db.c = cnn_out_sz\n","cnn_learn = cnn_learner(image_data_db, cnn_arch, ps=0.2)\n","cnn_model = cnn_learn.model"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":21,"status":"ok","timestamp":1639472807946,"user":{"displayName":"demore demore","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16558528897465647936"},"user_tz":-540},"id":"sHELiIlpUMBP","outputId":"3d540d76-5605-4e20-a990-931f0f7a57bb"},"outputs":[{"data":{"text/plain":["Sequential(\n","  (0): Sequential(\n","    (0): Sequential(\n","      (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","      (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (2): ReLU(inplace=True)\n","      (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","      (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (5): ReLU(inplace=True)\n","      (6): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n","      (7): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","      (8): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (9): ReLU(inplace=True)\n","      (10): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","      (11): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (12): ReLU(inplace=True)\n","      (13): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n","      (14): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","      (15): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (16): ReLU(inplace=True)\n","      (17): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","      (18): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (19): ReLU(inplace=True)\n","      (20): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","      (21): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (22): ReLU(inplace=True)\n","      (23): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n","      (24): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","      (25): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (26): ReLU(inplace=True)\n","      (27): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","      (28): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (29): ReLU(inplace=True)\n","      (30): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","      (31): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (32): ReLU(inplace=True)\n","      (33): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n","      (34): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","      (35): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (36): ReLU(inplace=True)\n","      (37): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","      (38): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (39): ReLU(inplace=True)\n","      (40): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","      (41): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (42): ReLU(inplace=True)\n","      (43): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n","    )\n","    (1): AdaptiveAvgPool2d(output_size=(7, 7))\n","  )\n","  (1): Sequential(\n","    (0): AdaptiveConcatPool2d(\n","      (ap): AdaptiveAvgPool2d(output_size=1)\n","      (mp): AdaptiveMaxPool2d(output_size=1)\n","    )\n","    (1): Flatten()\n","    (2): BatchNorm1d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","    (3): Dropout(p=0.1, inplace=False)\n","    (4): Linear(in_features=1024, out_features=512, bias=True)\n","    (5): ReLU(inplace=True)\n","    (6): BatchNorm1d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","    (7): Dropout(p=0.2, inplace=False)\n","    (8): Linear(in_features=512, out_features=256, bias=True)\n","  )\n",")"]},"execution_count":27,"metadata":{},"output_type":"execute_result"}],"source":["cnn_model"]},{"cell_type":"markdown","metadata":{"id":"-Wiex9KEi8K8"},"source":["## Tabular ann\n"]},{"cell_type":"code","execution_count":27,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":11,"status":"ok","timestamp":1639959958500,"user":{"displayName":"demore demore","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16558528897465647936"},"user_tz":-540},"id":"j9n0df--QK_I","outputId":"daaa993f-4f00-4317-de8e-3ca667a6ab88"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["TabularModel(\n","  (embeds): ModuleList(\n","    (0): Embedding(3, 3)\n","    (1): Embedding(3, 3)\n","  )\n","  (emb_drop): Dropout(p=0.0, inplace=False)\n","  (bn_cont): BatchNorm1d(1, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","  (layers): Sequential(\n","    (0): Linear(in_features=7, out_features=8, bias=True)\n","    (1): ReLU(inplace=True)\n","    (2): BatchNorm1d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","    (3): Dropout(p=0.2, inplace=False)\n","    (4): Linear(in_features=8, out_features=8, bias=True)\n","  )\n",")"]},"metadata":{},"execution_count":27}],"source":["# get embedding sizes of categorical data\n","emb_szs = tab_data.train.get_emb_szs()\n","\n","# output size of the tabular model that will be concatenated with cnn model output\n","tab_out_sz = 8\n","\n","# use fastai functions to get a tabular model\n","tabular_model = TabularModel(emb_szs, len(cont_names), out_sz=tab_out_sz, layers=[8], ps=0.2)\n","tabular_model"]},{"cell_type":"code","execution_count":28,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":9,"status":"ok","timestamp":1639959958500,"user":{"displayName":"demore demore","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16558528897465647936"},"user_tz":-540},"id":"LBj1Zt7nkGGR","outputId":"6aa2b3cc-a125-4ca1-d03a-31aac8525a17"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["1"]},"metadata":{},"execution_count":28}],"source":["len(cont_names)"]},{"cell_type":"code","execution_count":29,"metadata":{"executionInfo":{"elapsed":6,"status":"ok","timestamp":1639959958500,"user":{"displayName":"demore demore","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16558528897465647936"},"user_tz":-540},"id":"rFNjATyXQlQq"},"outputs":[],"source":["# get an integrated model that combines the two components and concatenate their outputs\n","# which will pass through additional fully connected layers\n","integrate_model = CNNTabularModel(cnn_model,\n","                                  tabular_model,\n","                                  layers = [cnn_out_sz + tab_out_sz, bs],\n","                                  ps=0.2,\n","                                  out_sz=2).to(device)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"u9jP7elrUoO9"},"outputs":[],"source":["# # check model output dimension, should be (bs, 2)\n","# integrate_model(*x).shape"]},{"cell_type":"code","execution_count":30,"metadata":{"executionInfo":{"elapsed":6,"status":"ok","timestamp":1639959958501,"user":{"displayName":"demore demore","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16558528897465647936"},"user_tz":-540},"id":"U4dsIg5XQydi"},"outputs":[],"source":["# adjust loss function weight because the dataset is extremely unbalanced\n","weights = [1/(1-train_df[\"label\"].mean()), 1/train_df[\"label\"].mean()]\n","loss_func = CrossEntropyFlat(weight=torch.FloatTensor(weights).to(device))"]},{"cell_type":"code","execution_count":31,"metadata":{"executionInfo":{"elapsed":6,"status":"ok","timestamp":1639959958501,"user":{"displayName":"demore demore","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16558528897465647936"},"user_tz":-540},"id":"yM1em88jtN4s"},"outputs":[],"source":["# loss_func = CrossEntropyFlat()"]},{"cell_type":"code","execution_count":32,"metadata":{"executionInfo":{"elapsed":393,"status":"ok","timestamp":1639959958889,"user":{"displayName":"demore demore","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16558528897465647936"},"user_tz":-540},"id":"-YLBE_WjQ5FI"},"outputs":[],"source":["# package everything in a fastai learner, add auc roc score as a metric\n","learn = Learner(db, integrate_model, metrics=[accuracy,Precision(),Recall(),ROCAUC()], loss_func=loss_func,callback_fns=ShowGraph)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"cs4kjKh2Q_K5"},"outputs":[],"source":["# organize layer groups in order to use differential learning rates provided by fastai\n","# the first two layer groups are earlier layers of resnet\n","# the last layer group consists of the fully connected layers of cnn model, tabular model,\n","# and final fully connected layers for the concatenated data\n","# learn.layer_groups = [nn.Sequential(*flatten_model(cnn_learn.layer_groups[0])),\n","#                       nn.Sequential(*flatten_model(cnn_learn.layer_groups[1])),\n","#                       nn.Sequential(*(flatten_model(cnn_learn.layer_groups[2]) +\n","#                                       flatten_model(integrate_model.tabular_model) +\n","#                                       flatten_model(integrate_model.layers)))]"]},{"cell_type":"code","execution_count":33,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":458},"executionInfo":{"elapsed":23560,"status":"error","timestamp":1639959982446,"user":{"displayName":"demore demore","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16558528897465647936"},"user_tz":-540},"id":"9eg92dZyRCyA","outputId":"b8c7a4b8-3731-4d1b-8efc-f1bece99e107"},"outputs":[{"output_type":"display_data","data":{"text/html":["\n","    <div>\n","        <style>\n","            /* Turns off some styling */\n","            progress {\n","                /* gets rid of default border in Firefox and Opera. */\n","                border: none;\n","                /* Needs to be in here for Safari polyfill so background images work as expected. */\n","                background-size: auto;\n","            }\n","            .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {\n","                background: #F44336;\n","            }\n","        </style>\n","      <progress value='0' class='' max='4' style='width:300px; height:20px; vertical-align: middle;'></progress>\n","      0.00% [0/4 00:00<00:00]\n","    </div>\n","    \n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: left;\">\n","      <th>epoch</th>\n","      <th>train_loss</th>\n","      <th>valid_loss</th>\n","      <th>accuracy</th>\n","      <th>precision</th>\n","      <th>recall</th>\n","      <th>rocauc</th>\n","      <th>time</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","  </tbody>\n","</table><p>\n","\n","    <div>\n","        <style>\n","            /* Turns off some styling */\n","            progress {\n","                /* gets rid of default border in Firefox and Opera. */\n","                border: none;\n","                /* Needs to be in here for Safari polyfill so background images work as expected. */\n","                background-size: auto;\n","            }\n","            .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {\n","                background: #F44336;\n","            }\n","        </style>\n","      <progress value='0' class='' max='25' style='width:300px; height:20px; vertical-align: middle;'></progress>\n","      0.00% [0/25 00:00<00:00]\n","    </div>\n","    "],"text/plain":["<IPython.core.display.HTML object>"]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["LR Finder is complete, type {learner_name}.recorder.plot() to see the graph.\n"]},{"output_type":"error","ename":"KeyboardInterrupt","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-33-6a72d410a37e>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m# find learning rate to train the last layer group first\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mlearn\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlr_find\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m \u001b[0mlearn\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrecorder\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mplot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msuggestion\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/fastai/train.py\u001b[0m in \u001b[0;36mlr_find\u001b[0;34m(learn, start_lr, end_lr, num_it, stop_div, wd)\u001b[0m\n\u001b[1;32m     39\u001b[0m     \u001b[0mcb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mLRFinder\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlearn\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mstart_lr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mend_lr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnum_it\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mstop_div\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     40\u001b[0m     \u001b[0mepochs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mceil\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnum_it\u001b[0m\u001b[0;34m/\u001b[0m\u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlearn\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtrain_dl\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m*\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mnum_distrib\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 41\u001b[0;31m     \u001b[0mlearn\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mepochs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mstart_lr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcallbacks\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mcb\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mwd\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mwd\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     42\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     43\u001b[0m def to_fp16(learn:Learner, loss_scale:float=None, max_noskip:int=1000, dynamic:bool=True, clip:float=None,\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/fastai/basic_train.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, epochs, lr, wd, callbacks)\u001b[0m\n\u001b[1;32m    198\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mopt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlr\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mopt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwd\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlr\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mwd\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    199\u001b[0m         \u001b[0mcallbacks\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mcb\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mcb\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcallback_fns\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mlistify\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdefaults\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mextra_callback_fns\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mlistify\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcallbacks\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 200\u001b[0;31m         \u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mepochs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmetrics\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmetrics\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcallbacks\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcallbacks\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0mcallbacks\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    201\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    202\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mcreate_opt\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlr\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0mFloats\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mwd\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0mFloats\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m0.\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m->\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/fastai/basic_train.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(epochs, learn, callbacks, metrics)\u001b[0m\n\u001b[1;32m     99\u001b[0m             \u001b[0;32mfor\u001b[0m \u001b[0mxb\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0myb\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mprogress_bar\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlearn\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtrain_dl\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mparent\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mpbar\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    100\u001b[0m                 \u001b[0mxb\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0myb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcb_handler\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mon_batch_begin\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mxb\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0myb\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 101\u001b[0;31m                 \u001b[0mloss\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mloss_batch\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlearn\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmodel\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mxb\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0myb\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlearn\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mloss_func\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlearn\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mopt\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcb_handler\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    102\u001b[0m                 \u001b[0;32mif\u001b[0m \u001b[0mcb_handler\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mon_batch_end\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mloss\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0;32mbreak\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    103\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/fastai/basic_train.py\u001b[0m in \u001b[0;36mloss_batch\u001b[0;34m(model, xb, yb, loss_func, opt, cb_handler)\u001b[0m\n\u001b[1;32m     24\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mis_listy\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mxb\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mxb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mxb\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     25\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mis_listy\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0myb\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0myb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0myb\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 26\u001b[0;31m     \u001b[0mout\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmodel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0mxb\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     27\u001b[0m     \u001b[0mout\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcb_handler\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mon_loss_begin\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mout\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     28\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/torch/nn/modules/module.py\u001b[0m in \u001b[0;36m_call_impl\u001b[0;34m(self, *input, **kwargs)\u001b[0m\n\u001b[1;32m   1100\u001b[0m         if not (self._backward_hooks or self._forward_hooks or self._forward_pre_hooks or _global_backward_hooks\n\u001b[1;32m   1101\u001b[0m                 or _global_forward_hooks or _global_forward_pre_hooks):\n\u001b[0;32m-> 1102\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mforward_call\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0minput\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1103\u001b[0m         \u001b[0;31m# Do not call functions when jit is used\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1104\u001b[0m         \u001b[0mfull_backward_hooks\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnon_full_backward_hooks\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/image_tabular/model.py\u001b[0m in \u001b[0;36mforward\u001b[0;34m(self, *x)\u001b[0m\n\u001b[1;32m     39\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mforward\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     40\u001b[0m         \u001b[0;31m# image\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 41\u001b[0;31m         \u001b[0mx_image\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcnn_model\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     42\u001b[0m         \u001b[0;31m# tabular, expand categorical and continous data\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     43\u001b[0m         \u001b[0mx_tab\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtabular_model\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/torch/nn/modules/module.py\u001b[0m in \u001b[0;36m_call_impl\u001b[0;34m(self, *input, **kwargs)\u001b[0m\n\u001b[1;32m   1100\u001b[0m         if not (self._backward_hooks or self._forward_hooks or self._forward_pre_hooks or _global_backward_hooks\n\u001b[1;32m   1101\u001b[0m                 or _global_forward_hooks or _global_forward_pre_hooks):\n\u001b[0;32m-> 1102\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mforward_call\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0minput\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1103\u001b[0m         \u001b[0;31m# Do not call functions when jit is used\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1104\u001b[0m         \u001b[0mfull_backward_hooks\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnon_full_backward_hooks\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/torch/nn/modules/container.py\u001b[0m in \u001b[0;36mforward\u001b[0;34m(self, input)\u001b[0m\n\u001b[1;32m    139\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mforward\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minput\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    140\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0mmodule\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 141\u001b[0;31m             \u001b[0minput\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmodule\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minput\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    142\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0minput\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    143\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/torch/nn/modules/module.py\u001b[0m in \u001b[0;36m_call_impl\u001b[0;34m(self, *input, **kwargs)\u001b[0m\n\u001b[1;32m   1100\u001b[0m         if not (self._backward_hooks or self._forward_hooks or self._forward_pre_hooks or _global_backward_hooks\n\u001b[1;32m   1101\u001b[0m                 or _global_forward_hooks or _global_forward_pre_hooks):\n\u001b[0;32m-> 1102\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mforward_call\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0minput\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1103\u001b[0m         \u001b[0;31m# Do not call functions when jit is used\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1104\u001b[0m         \u001b[0mfull_backward_hooks\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnon_full_backward_hooks\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/torch/nn/modules/container.py\u001b[0m in \u001b[0;36mforward\u001b[0;34m(self, input)\u001b[0m\n\u001b[1;32m    139\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mforward\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minput\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    140\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0mmodule\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 141\u001b[0;31m             \u001b[0minput\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmodule\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minput\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    142\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0minput\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    143\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/torch/nn/modules/module.py\u001b[0m in \u001b[0;36m_call_impl\u001b[0;34m(self, *input, **kwargs)\u001b[0m\n\u001b[1;32m   1100\u001b[0m         if not (self._backward_hooks or self._forward_hooks or self._forward_pre_hooks or _global_backward_hooks\n\u001b[1;32m   1101\u001b[0m                 or _global_forward_hooks or _global_forward_pre_hooks):\n\u001b[0;32m-> 1102\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mforward_call\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0minput\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1103\u001b[0m         \u001b[0;31m# Do not call functions when jit is used\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1104\u001b[0m         \u001b[0mfull_backward_hooks\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnon_full_backward_hooks\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/torch/nn/modules/container.py\u001b[0m in \u001b[0;36mforward\u001b[0;34m(self, input)\u001b[0m\n\u001b[1;32m    139\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mforward\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minput\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    140\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0mmodule\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 141\u001b[0;31m             \u001b[0minput\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmodule\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minput\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    142\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0minput\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    143\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/torch/nn/modules/module.py\u001b[0m in \u001b[0;36m_call_impl\u001b[0;34m(self, *input, **kwargs)\u001b[0m\n\u001b[1;32m   1100\u001b[0m         if not (self._backward_hooks or self._forward_hooks or self._forward_pre_hooks or _global_backward_hooks\n\u001b[1;32m   1101\u001b[0m                 or _global_forward_hooks or _global_forward_pre_hooks):\n\u001b[0;32m-> 1102\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mforward_call\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0minput\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1103\u001b[0m         \u001b[0;31m# Do not call functions when jit is used\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1104\u001b[0m         \u001b[0mfull_backward_hooks\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnon_full_backward_hooks\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/torch/nn/modules/pooling.py\u001b[0m in \u001b[0;36mforward\u001b[0;34m(self, input)\u001b[0m\n\u001b[1;32m    162\u001b[0m         return F.max_pool2d(input, self.kernel_size, self.stride,\n\u001b[1;32m    163\u001b[0m                             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpadding\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdilation\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mceil_mode\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 164\u001b[0;31m                             self.return_indices)\n\u001b[0m\u001b[1;32m    165\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    166\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/torch/_jit_internal.py\u001b[0m in \u001b[0;36mfn\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    420\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mif_true\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    421\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 422\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mif_false\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    423\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    424\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mif_true\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__doc__\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mif_false\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__doc__\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/torch/nn/functional.py\u001b[0m in \u001b[0;36m_max_pool2d\u001b[0;34m(input, kernel_size, stride, padding, dilation, ceil_mode, return_indices)\u001b[0m\n\u001b[1;32m    717\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mstride\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    718\u001b[0m         \u001b[0mstride\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtorch\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mjit\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mannotate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mList\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mint\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 719\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0mtorch\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmax_pool2d\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minput\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkernel_size\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mstride\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mpadding\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdilation\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mceil_mode\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    720\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    721\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: "]}],"source":["# # find learning rate to train the last layer group first \n","# learn.lr_find()\n","# learn.recorder.plot(suggestion = True)"]},{"cell_type":"code","execution_count":null,"metadata":{"executionInfo":{"elapsed":31,"status":"aborted","timestamp":1639959982443,"user":{"displayName":"demore demore","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16558528897465647936"},"user_tz":-540},"id":"ugeB1rjBrePx"},"outputs":[],"source":["#Access learning exact learning rate\n","# min_grad_lr = learn.recorder.min_grad_lr\n","# min_grad_lr"]},{"cell_type":"code","execution_count":34,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"elapsed":7139049,"status":"ok","timestamp":1639967128902,"user":{"displayName":"demore demore","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16558528897465647936"},"user_tz":-540},"id":"CEDVqiLU-vyp","outputId":"6fc5ee41-09c9-4297-f6c3-0d197d94d79b"},"outputs":[{"output_type":"display_data","data":{"text/html":["<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: left;\">\n","      <th>epoch</th>\n","      <th>train_loss</th>\n","      <th>valid_loss</th>\n","      <th>accuracy</th>\n","      <th>precision</th>\n","      <th>recall</th>\n","      <th>rocauc</th>\n","      <th>time</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <td>0</td>\n","      <td>0.570338</td>\n","      <td>0.474206</td>\n","      <td>0.820895</td>\n","      <td>1.000000</td>\n","      <td>0.571429</td>\n","      <td>0.891127</td>\n","      <td>24:02</td>\n","    </tr>\n","    <tr>\n","      <td>1</td>\n","      <td>0.463594</td>\n","      <td>0.404347</td>\n","      <td>0.835821</td>\n","      <td>0.981132</td>\n","      <td>0.619048</td>\n","      <td>0.895096</td>\n","      <td>23:47</td>\n","    </tr>\n","    <tr>\n","      <td>2</td>\n","      <td>0.415191</td>\n","      <td>0.365240</td>\n","      <td>0.845771</td>\n","      <td>0.895522</td>\n","      <td>0.714286</td>\n","      <td>0.897843</td>\n","      <td>23:33</td>\n","    </tr>\n","    <tr>\n","      <td>3</td>\n","      <td>0.376070</td>\n","      <td>0.365964</td>\n","      <td>0.835821</td>\n","      <td>0.859155</td>\n","      <td>0.726190</td>\n","      <td>0.900285</td>\n","      <td>23:45</td>\n","    </tr>\n","    <tr>\n","      <td>4</td>\n","      <td>0.350913</td>\n","      <td>0.365753</td>\n","      <td>0.835821</td>\n","      <td>0.831169</td>\n","      <td>0.761905</td>\n","      <td>0.902727</td>\n","      <td>23:47</td>\n","    </tr>\n","  </tbody>\n","</table>"],"text/plain":["<IPython.core.display.HTML object>"]},"metadata":{}},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{}},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x1152 with 4 Axes>"]},"metadata":{"needs_background":"light"}}],"source":["# train\n","seed = 42\n","random.seed(seed)\n","np.random.seed(seed)\n","torch.manual_seed(seed)\n","torch.cuda.manual_seed_all(seed)\n","learn.fit_one_cycle(5, 0.001)\n","learn.recorder.plot_metrics()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":363},"executionInfo":{"elapsed":559,"status":"error","timestamp":1639473751520,"user":{"displayName":"demore demore","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16558528897465647936"},"user_tz":-540},"id":"4JsisBYs-0sP","outputId":"78b4afe8-2b50-4394-ce39-376b23e9a560"},"outputs":[{"ename":"ZeroDivisionError","evalue":"ignored","output_type":"error","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mZeroDivisionError\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-39-4175cb7eacd2>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m# unfreeze all layer groups to train the entire model using differential learning rates\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0mlearn\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0munfreeze\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m \u001b[0mlearn\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit_one_cycle\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m15\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mslice\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m1e-4\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m1e-2\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      4\u001b[0m \u001b[0mlearn\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrecorder\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mplot_metrics\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/fastai/train.py\u001b[0m in \u001b[0;36mfit_one_cycle\u001b[0;34m(learn, cyc_len, max_lr, moms, div_factor, pct_start, final_div, wd, callbacks, tot_epochs, start_epoch)\u001b[0m\n\u001b[1;32m     17\u001b[0m                   wd:float=None, callbacks:Optional[CallbackList]=None, tot_epochs:int=None, start_epoch:int=None)->None:\n\u001b[1;32m     18\u001b[0m     \u001b[0;34m\"Fit a model following the 1cycle policy.\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 19\u001b[0;31m     \u001b[0mmax_lr\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlearn\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlr_range\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmax_lr\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     20\u001b[0m     \u001b[0mcallbacks\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlistify\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcallbacks\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     21\u001b[0m     callbacks.append(OneCycleScheduler(learn, max_lr, moms=moms, div_factor=div_factor, pct_start=pct_start,\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/fastai/basic_train.py\u001b[0m in \u001b[0;36mlr_range\u001b[0;34m(self, lr)\u001b[0m\n\u001b[1;32m    186\u001b[0m         \u001b[0;34m\"Build differential learning rates from `lr`.\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    187\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlr\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mslice\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0;32mreturn\u001b[0m \u001b[0mlr\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 188\u001b[0;31m         \u001b[0;32mif\u001b[0m \u001b[0mlr\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstart\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mres\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0meven_mults\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlr\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstart\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlr\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstop\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlayer_groups\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    189\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mres\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mlr\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstop\u001b[0m\u001b[0;34m/\u001b[0m\u001b[0;36m10\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlayer_groups\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mlr\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstop\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    190\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0marray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mres\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/fastai/core.py\u001b[0m in \u001b[0;36meven_mults\u001b[0;34m(start, stop, n)\u001b[0m\n\u001b[1;32m    151\u001b[0m     \u001b[0;34m\"Build log-stepped array from `start` to `stop` in `n` steps.\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    152\u001b[0m     \u001b[0mmult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mstop\u001b[0m\u001b[0;34m/\u001b[0m\u001b[0mstart\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 153\u001b[0;31m     \u001b[0mstep\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmult\u001b[0m\u001b[0;34m**\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m/\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mn\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    154\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0marray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mstart\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mstep\u001b[0m\u001b[0;34m**\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mi\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mn\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    155\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mZeroDivisionError\u001b[0m: division by zero"]}],"source":["# # unfreeze all layer groups to train the entire model using differential learning rates\n","# learn.unfreeze()\n","# learn.fit_one_cycle(15, slice(1e-4, 1e-2))\n","# learn.recorder.plot_metrics()"]},{"cell_type":"markdown","metadata":{"id":"vTQfwX0mjuKr"},"source":["## Prediction\n","\n"]},{"cell_type":"code","source":["#Confusion Matrix\n","from fastai.train import ClassificationInterpretation\n","interp = ClassificationInterpretation.from_learner(learn)\n","losses, idxs = interp.top_losses()\n","len(image_data_db.valid_ds)==len(losses)==len(idxs)\n","interp.plot_confusion_matrix(figsize=(7,7))"],"metadata":{"id":"IRNf_VYkPAs2"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#Confusion Matrix\n","upp, low = interp.confusion_matrix()\n","tn, fp = upp[0], upp[1]\n","fn, tp = low[0], low[1]\n","print(tn, fp, fn, tp)"],"metadata":{"id":"JdV5oh05Q4Bk"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#Sensitivity\n","sensitivity = tp/(tp + fn)\n","sensitivity"],"metadata":{"id":"uysWl3teRCmz"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["specificity = tn/(fp + tn)\n","specificity"],"metadata":{"id":"OCJ3C9jiShJF"},"execution_count":null,"outputs":[]}],"metadata":{"accelerator":"TPU","colab":{"collapsed_sections":["2TXVBEQZaGLa","uz3CQNeIEplO","iCjIfXTJHAKS","vTQfwX0mjuKr"],"name":"synth_real_meta_vgg16","provenance":[],"authorship_tag":"ABX9TyNX6X8ssYvha4Emq8PMHGl0"},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"},"widgets":{"application/vnd.jupyter.widget-state+json":{"2236abba62f346abb32813f7f7bbf495":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","model_module_version":"1.5.0","state":{"_view_name":"HBoxView","_dom_classes":[],"_model_name":"HBoxModel","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.5.0","box_style":"","layout":"IPY_MODEL_8f79516dfa50493f987c08375d9709a1","_model_module":"@jupyter-widgets/controls","children":["IPY_MODEL_6a3cc8144eca4b3f9c4b822b3630cfb1","IPY_MODEL_1dd62419de4847968dace50f545414b0","IPY_MODEL_3784eaf1e7f044e480c5ec9b4b1dc018"]}},"8f79516dfa50493f987c08375d9709a1":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"6a3cc8144eca4b3f9c4b822b3630cfb1":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_view_name":"HTMLView","style":"IPY_MODEL_4299f53a73ad4143905cfad12f6394e3","_dom_classes":[],"description":"","_model_name":"HTMLModel","placeholder":"​","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":"100%","_view_count":null,"_view_module_version":"1.5.0","description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_5aa611851d0d463b9f11af5b60338ab9"}},"1dd62419de4847968dace50f545414b0":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","model_module_version":"1.5.0","state":{"_view_name":"ProgressView","style":"IPY_MODEL_3e828b62453142ff9d335d24320768e2","_dom_classes":[],"description":"","_model_name":"FloatProgressModel","bar_style":"success","max":553507836,"_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":553507836,"_view_count":null,"_view_module_version":"1.5.0","orientation":"horizontal","min":0,"description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_6a23a5824701481989ebf155242fe7ee"}},"3784eaf1e7f044e480c5ec9b4b1dc018":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_view_name":"HTMLView","style":"IPY_MODEL_6c850e8cfeca4d0382243ea96b9f778c","_dom_classes":[],"description":"","_model_name":"HTMLModel","placeholder":"​","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":" 528M/528M [00:22&lt;00:00, 30.3MB/s]","_view_count":null,"_view_module_version":"1.5.0","description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_05d5209d3fa34389ab05d4591299d2da"}},"4299f53a73ad4143905cfad12f6394e3":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_view_name":"StyleView","_model_name":"DescriptionStyleModel","description_width":"","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","_model_module":"@jupyter-widgets/controls"}},"5aa611851d0d463b9f11af5b60338ab9":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"3e828b62453142ff9d335d24320768e2":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_view_name":"StyleView","_model_name":"ProgressStyleModel","description_width":"","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","bar_color":null,"_model_module":"@jupyter-widgets/controls"}},"6a23a5824701481989ebf155242fe7ee":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"6c850e8cfeca4d0382243ea96b9f778c":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_view_name":"StyleView","_model_name":"DescriptionStyleModel","description_width":"","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","_model_module":"@jupyter-widgets/controls"}},"05d5209d3fa34389ab05d4591299d2da":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}}}}},"nbformat":4,"nbformat_minor":0}