{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"synth_meta","provenance":[],"authorship_tag":"ABX9TyNuUVq7FGTYfl8cRiL7cNqy"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"5KkOTv9M2hB1","executionInfo":{"status":"ok","timestamp":1639442936092,"user_tz":-540,"elapsed":499,"user":{"displayName":"demore demore","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16558528897465647936"}},"outputId":"bfc4ef2d-d9c3-4ae3-c009-c8db5f154901"},"source":["gpu_info = !nvidia-smi\n","gpu_info = '\\n'.join(gpu_info)\n","if gpu_info.find('failed') >= 0:\n","  print('Select the Runtime > \"Change runtime type\" menu to enable a GPU accelerator, ')\n","  print('and then re-execute this cell.')\n","else:\n","  print(gpu_info)"],"execution_count":1,"outputs":[{"output_type":"stream","name":"stdout","text":["Select the Runtime > \"Change runtime type\" menu to enable a GPU accelerator, \n","and then re-execute this cell.\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"wMFGhdin2ojs","executionInfo":{"status":"ok","timestamp":1639442938631,"user_tz":-540,"elapsed":2024,"user":{"displayName":"demore demore","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16558528897465647936"}},"outputId":"89502eff-4da2-43d2-c56a-ed37837c46af"},"source":["#Mount google drive\n","from google.colab import drive\n","drive.mount('/content/drive')"],"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"]}]},{"cell_type":"code","metadata":{"id":"brkO3Gvp23-D","executionInfo":{"status":"ok","timestamp":1639442938631,"user_tz":-540,"elapsed":14,"user":{"displayName":"demore demore","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16558528897465647936"}}},"source":["import os\n","#set working directory\n","root_dir = \"/content/drive/My Drive/\""],"execution_count":3,"outputs":[]},{"cell_type":"code","metadata":{"id":"l43jisVq24BB","executionInfo":{"status":"ok","timestamp":1639442938632,"user_tz":-540,"elapsed":14,"user":{"displayName":"demore demore","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16558528897465647936"}}},"source":["#choose the project folder\n","project_folder = \"Colab Notebooks/chest/\""],"execution_count":4,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"g3Ok5Aae24D0","executionInfo":{"status":"ok","timestamp":1639442938632,"user_tz":-540,"elapsed":14,"user":{"displayName":"demore demore","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16558528897465647936"}},"outputId":"75d61c02-d796-4ab7-f371-6f1b9ec82f51"},"source":["#define a function to create and set the working directory\n","def create_and_set_working_directory(project_folder):\n","  #check if the project folder exists. if not, make one.\n","  if os.path.isdir(root_dir + project_folder) == False:\n","    os.mkdir(root_dir + project_folder)\n","\n","print(root_dir + project_folder + 'did not exist and was created.')"],"execution_count":5,"outputs":[{"output_type":"stream","name":"stdout","text":["/content/drive/My Drive/Colab Notebooks/chest/did not exist and was created.\n"]}]},{"cell_type":"code","metadata":{"id":"fIybFgq-24Gq","executionInfo":{"status":"ok","timestamp":1639442938633,"user_tz":-540,"elapsed":13,"user":{"displayName":"demore demore","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16558528897465647936"}}},"source":["#change the OS path to project folder as working directory\n","os.chdir(root_dir + project_folder)"],"execution_count":6,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"WpY4pE6k24Jd","executionInfo":{"status":"ok","timestamp":1639442938633,"user_tz":-540,"elapsed":12,"user":{"displayName":"demore demore","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16558528897465647936"}},"outputId":"872c4edb-93bf-4a1c-8267-b1175d37ecc9"},"source":["#create a test file in the working directory and see if it shows up at the right place\n","!touch 'new_file_test.txt'\n","print('working directory' + root_dir + project_folder + \\\n","      \"empty text file created. You can also run !pwd command to confirm working directory.\")"],"execution_count":7,"outputs":[{"output_type":"stream","name":"stdout","text":["working directory/content/drive/My Drive/Colab Notebooks/chest/empty text file created. You can also run !pwd command to confirm working directory.\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":35},"id":"KuDHi2mT3PJd","executionInfo":{"status":"ok","timestamp":1639442938634,"user_tz":-540,"elapsed":11,"user":{"displayName":"demore demore","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16558528897465647936"}},"outputId":"2b577a48-235b-417a-f3c8-ce6d689924d6"},"source":["pwd"],"execution_count":8,"outputs":[{"output_type":"execute_result","data":{"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"},"text/plain":["'/content/drive/My Drive/Colab Notebooks/chest'"]},"metadata":{},"execution_count":8}]},{"cell_type":"code","metadata":{"id":"zIsQV7THm_Kv","executionInfo":{"status":"ok","timestamp":1639442938634,"user_tz":-540,"elapsed":9,"user":{"displayName":"demore demore","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16558528897465647936"}}},"source":["import random\n","random.seed(42)"],"execution_count":9,"outputs":[]},{"cell_type":"code","metadata":{"id":"8vXIxIYsrrNl","executionInfo":{"status":"ok","timestamp":1639442938635,"user_tz":-540,"elapsed":10,"user":{"displayName":"demore demore","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16558528897465647936"}}},"source":["%reload_ext autoreload\n","%autoreload 2\n","%matplotlib inline"],"execution_count":10,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"dCzcK-ALg3ZX","executionInfo":{"status":"ok","timestamp":1639442942122,"user_tz":-540,"elapsed":3497,"user":{"displayName":"demore demore","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16558528897465647936"}},"outputId":"2007e06d-74d7-4964-a19c-ba265d2c8c47"},"source":["pip install image_tabular"],"execution_count":11,"outputs":[{"output_type":"stream","name":"stdout","text":["Requirement already satisfied: image_tabular in /usr/local/lib/python3.7/dist-packages (0.0.6)\n","Requirement already satisfied: scikit-learn in /usr/local/lib/python3.7/dist-packages (from image_tabular) (1.0.1)\n","Requirement already satisfied: torch in /usr/local/lib/python3.7/dist-packages (from image_tabular) (1.10.0+cu111)\n","Requirement already satisfied: fastai in /usr/local/lib/python3.7/dist-packages (from image_tabular) (1.0.61)\n","Requirement already satisfied: torchvision in /usr/local/lib/python3.7/dist-packages (from image_tabular) (0.11.1+cu111)\n","Requirement already satisfied: numexpr in /usr/local/lib/python3.7/dist-packages (from fastai->image_tabular) (2.7.3)\n","Requirement already satisfied: bottleneck in /usr/local/lib/python3.7/dist-packages (from fastai->image_tabular) (1.3.2)\n","Requirement already satisfied: Pillow in /usr/local/lib/python3.7/dist-packages (from fastai->image_tabular) (7.1.2)\n","Requirement already satisfied: numpy>=1.15 in /usr/local/lib/python3.7/dist-packages (from fastai->image_tabular) (1.19.5)\n","Requirement already satisfied: requests in /usr/local/lib/python3.7/dist-packages (from fastai->image_tabular) (2.23.0)\n","Requirement already satisfied: matplotlib in /usr/local/lib/python3.7/dist-packages (from fastai->image_tabular) (3.2.2)\n","Requirement already satisfied: spacy>=2.0.18 in /usr/local/lib/python3.7/dist-packages (from fastai->image_tabular) (2.2.4)\n","Requirement already satisfied: pyyaml in /usr/local/lib/python3.7/dist-packages (from fastai->image_tabular) (3.13)\n","Requirement already satisfied: fastprogress>=0.2.1 in /usr/local/lib/python3.7/dist-packages (from fastai->image_tabular) (1.0.0)\n","Requirement already satisfied: nvidia-ml-py3 in /usr/local/lib/python3.7/dist-packages (from fastai->image_tabular) (7.352.0)\n","Requirement already satisfied: scipy in /usr/local/lib/python3.7/dist-packages (from fastai->image_tabular) (1.4.1)\n","Requirement already satisfied: beautifulsoup4 in /usr/local/lib/python3.7/dist-packages (from fastai->image_tabular) (4.6.3)\n","Requirement already satisfied: packaging in /usr/local/lib/python3.7/dist-packages (from fastai->image_tabular) (21.3)\n","Requirement already satisfied: pandas in /usr/local/lib/python3.7/dist-packages (from fastai->image_tabular) (1.1.5)\n","Requirement already satisfied: tqdm<5.0.0,>=4.38.0 in /usr/local/lib/python3.7/dist-packages (from spacy>=2.0.18->fastai->image_tabular) (4.62.3)\n","Requirement already satisfied: cymem<2.1.0,>=2.0.2 in /usr/local/lib/python3.7/dist-packages (from spacy>=2.0.18->fastai->image_tabular) (2.0.6)\n","Requirement already satisfied: srsly<1.1.0,>=1.0.2 in /usr/local/lib/python3.7/dist-packages (from spacy>=2.0.18->fastai->image_tabular) (1.0.5)\n","Requirement already satisfied: blis<0.5.0,>=0.4.0 in /usr/local/lib/python3.7/dist-packages (from spacy>=2.0.18->fastai->image_tabular) (0.4.1)\n","Requirement already satisfied: plac<1.2.0,>=0.9.6 in /usr/local/lib/python3.7/dist-packages (from spacy>=2.0.18->fastai->image_tabular) (1.1.3)\n","Requirement already satisfied: murmurhash<1.1.0,>=0.28.0 in /usr/local/lib/python3.7/dist-packages (from spacy>=2.0.18->fastai->image_tabular) (1.0.6)\n","Requirement already satisfied: thinc==7.4.0 in /usr/local/lib/python3.7/dist-packages (from spacy>=2.0.18->fastai->image_tabular) (7.4.0)\n","Requirement already satisfied: wasabi<1.1.0,>=0.4.0 in /usr/local/lib/python3.7/dist-packages (from spacy>=2.0.18->fastai->image_tabular) (0.8.2)\n","Requirement already satisfied: preshed<3.1.0,>=3.0.2 in /usr/local/lib/python3.7/dist-packages (from spacy>=2.0.18->fastai->image_tabular) (3.0.6)\n","Requirement already satisfied: setuptools in /usr/local/lib/python3.7/dist-packages (from spacy>=2.0.18->fastai->image_tabular) (57.4.0)\n","Requirement already satisfied: catalogue<1.1.0,>=0.0.7 in /usr/local/lib/python3.7/dist-packages (from spacy>=2.0.18->fastai->image_tabular) (1.0.0)\n","Requirement already satisfied: importlib-metadata>=0.20 in /usr/local/lib/python3.7/dist-packages (from catalogue<1.1.0,>=0.0.7->spacy>=2.0.18->fastai->image_tabular) (4.8.2)\n","Requirement already satisfied: typing-extensions>=3.6.4 in /usr/local/lib/python3.7/dist-packages (from importlib-metadata>=0.20->catalogue<1.1.0,>=0.0.7->spacy>=2.0.18->fastai->image_tabular) (3.10.0.2)\n","Requirement already satisfied: zipp>=0.5 in /usr/local/lib/python3.7/dist-packages (from importlib-metadata>=0.20->catalogue<1.1.0,>=0.0.7->spacy>=2.0.18->fastai->image_tabular) (3.6.0)\n","Requirement already satisfied: idna<3,>=2.5 in /usr/local/lib/python3.7/dist-packages (from requests->fastai->image_tabular) (2.10)\n","Requirement already satisfied: chardet<4,>=3.0.2 in /usr/local/lib/python3.7/dist-packages (from requests->fastai->image_tabular) (3.0.4)\n","Requirement already satisfied: urllib3!=1.25.0,!=1.25.1,<1.26,>=1.21.1 in /usr/local/lib/python3.7/dist-packages (from requests->fastai->image_tabular) (1.24.3)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.7/dist-packages (from requests->fastai->image_tabular) (2021.10.8)\n","Requirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.7/dist-packages (from matplotlib->fastai->image_tabular) (1.3.2)\n","Requirement already satisfied: pyparsing!=2.0.4,!=2.1.2,!=2.1.6,>=2.0.1 in /usr/local/lib/python3.7/dist-packages (from matplotlib->fastai->image_tabular) (3.0.6)\n","Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.7/dist-packages (from matplotlib->fastai->image_tabular) (0.11.0)\n","Requirement already satisfied: python-dateutil>=2.1 in /usr/local/lib/python3.7/dist-packages (from matplotlib->fastai->image_tabular) (2.8.2)\n","Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.7/dist-packages (from python-dateutil>=2.1->matplotlib->fastai->image_tabular) (1.15.0)\n","Requirement already satisfied: pytz>=2017.2 in /usr/local/lib/python3.7/dist-packages (from pandas->fastai->image_tabular) (2018.9)\n","Requirement already satisfied: joblib>=0.11 in /usr/local/lib/python3.7/dist-packages (from scikit-learn->image_tabular) (1.1.0)\n","Requirement already satisfied: threadpoolctl>=2.0.0 in /usr/local/lib/python3.7/dist-packages (from scikit-learn->image_tabular) (3.0.0)\n"]}]},{"cell_type":"code","metadata":{"id":"8r9Rk9WXNwbX","executionInfo":{"status":"ok","timestamp":1639442944108,"user_tz":-540,"elapsed":1997,"user":{"displayName":"demore demore","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16558528897465647936"}}},"source":["from fastai.vision import *\n","from fastai.tabular import *\n","from image_tabular.core import *\n","from image_tabular.dataset import *\n","from image_tabular.model import *\n","from image_tabular.metric import *\n","\n","# use gpu by default if available\n","device = torch.device('cuda:0' if torch.cuda.is_available() else 'cpu')"],"execution_count":12,"outputs":[]},{"cell_type":"code","metadata":{"id":"7-d5wgZ1HCtD","executionInfo":{"status":"ok","timestamp":1639442944110,"user_tz":-540,"elapsed":10,"user":{"displayName":"demore demore","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16558528897465647936"}}},"source":["%reload_ext autoreload\n","%autoreload 2\n","%matplotlib inline"],"execution_count":13,"outputs":[]},{"cell_type":"code","metadata":{"id":"KVrBDYkyHGby","executionInfo":{"status":"ok","timestamp":1639442944110,"user_tz":-540,"elapsed":9,"user":{"displayName":"demore demore","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16558528897465647936"}}},"source":["from fastai.vision import *\n","from image_tabular.core import *\n","from image_tabular.metric import *\n","\n","# use gpu by default if available\n","device = torch.device('cuda:0' if torch.cuda.is_available() else 'cpu')"],"execution_count":14,"outputs":[]},{"cell_type":"code","metadata":{"id":"wa6lO3goZv5S","executionInfo":{"status":"ok","timestamp":1639442944111,"user_tz":-540,"elapsed":10,"user":{"displayName":"demore demore","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16558528897465647936"}}},"source":["data_path = ('data/synth_image/')"],"execution_count":15,"outputs":[]},{"cell_type":"code","metadata":{"id":"fK7c1AUpHRXZ","executionInfo":{"status":"ok","timestamp":1639442944111,"user_tz":-540,"elapsed":10,"user":{"displayName":"demore demore","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16558528897465647936"}}},"source":["import warnings\n","warnings.filterwarnings(\"ignore\", category=UserWarning, module=\"torch.nn.functional\")"],"execution_count":16,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"9fQIQc4EHT16","executionInfo":{"status":"ok","timestamp":1639442944111,"user_tz":-540,"elapsed":10,"user":{"displayName":"demore demore","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16558528897465647936"}},"outputId":"612ba9ab-577e-4245-c430-f43520d470b3"},"source":["train_df = pd.read_csv(f\"{data_path}train_meta_synth.csv\")\n","test_df = pd.read_csv(f\"{data_path}test_meta_synth.csv\")\n","\n","print(len(train_df), len(test_df))"],"execution_count":17,"outputs":[{"output_type":"stream","name":"stdout","text":["560 140\n"]}]},{"cell_type":"code","metadata":{"id":"9kyHljKjuB0q","colab":{"base_uri":"https://localhost:8080/","height":206},"executionInfo":{"status":"ok","timestamp":1639442944112,"user_tz":-540,"elapsed":10,"user":{"displayName":"demore demore","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16558528897465647936"}},"outputId":"af4baa76-f21f-4ffe-ae82-486ae480938e"},"source":["train_df.head()"],"execution_count":18,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Image Index</th>\n","      <th>labels</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>pneumonianeg_164.png</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>pneumonianeg_544.png</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>pneumonianeg_378.png</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>pneumoniapos_690.png</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>pneumoniapos_306.png</td>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["            Image Index  labels\n","0  pneumonianeg_164.png       0\n","1  pneumonianeg_544.png       0\n","2  pneumonianeg_378.png       0\n","3  pneumoniapos_690.png       1\n","4  pneumoniapos_306.png       1"]},"metadata":{},"execution_count":18}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ywOekGDQIP8r","executionInfo":{"status":"ok","timestamp":1639442944112,"user_tz":-540,"elapsed":9,"user":{"displayName":"demore demore","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16558528897465647936"}},"outputId":"72ae2572-4fda-437b-9055-6b609c52e1a8"},"source":["#determine normal and pneumonia cases distribution\n","distribution=train_df[\"labels\"].value_counts(normalize=True)\n","distribution"],"execution_count":19,"outputs":[{"output_type":"execute_result","data":{"text/plain":["1    0.5\n","0    0.5\n","Name: labels, dtype: float64"]},"metadata":{},"execution_count":19}]},{"cell_type":"markdown","metadata":{"id":"pxYeAEBsIc3g"},"source":["## Image data"]},{"cell_type":"code","metadata":{"id":"todEUmwiIhnS","executionInfo":{"status":"ok","timestamp":1639442945060,"user_tz":-540,"elapsed":955,"user":{"displayName":"demore demore","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16558528897465647936"}}},"source":["tfms = get_transforms(flip_vert=True)\n","size = 128\n","bs = 16"],"execution_count":20,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"YvXgkQo7Io4p","executionInfo":{"status":"ok","timestamp":1639442945061,"user_tz":-540,"elapsed":41,"user":{"displayName":"demore demore","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16558528897465647936"}},"outputId":"89ca4258-21b1-436d-fd17-d5b92b377596"},"source":["# idx for validation\n","val_idx = get_valid_index(train_df)\n","len(val_idx)"],"execution_count":21,"outputs":[{"output_type":"execute_result","data":{"text/plain":["112"]},"metadata":{},"execution_count":21}]},{"cell_type":"code","metadata":{"id":"aAuSOQqdIuZK","executionInfo":{"status":"ok","timestamp":1639442945061,"user_tz":-540,"elapsed":36,"user":{"displayName":"demore demore","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16558528897465647936"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"c155438c-95d5-4d1e-ed74-c71ce8f77bd3"},"source":["# load image data using train_df and prepare fastai LabelLists\n","image_data = (ImageList.from_df(train_df, path=data_path, cols=\"Image Index\",\n","                               folder=\"train_img_synth\")\n","              .split_by_idx(val_idx)\n","              .label_from_df(cols=\"labels\")\n","              .transform(tfms, size=size))\n","# , suffix=\".jpg\""],"execution_count":22,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/fastai/vision/transform.py:247: UserWarning: torch.solve is deprecated in favor of torch.linalg.solveand will be removed in a future PyTorch release.\n","torch.linalg.solve has its arguments reversed and does not return the LU factorization.\n","To get the LU factorization see torch.lu, which can be used with torch.lu_solve or torch.lu_unpack.\n","X = torch.solve(B, A).solution\n","should be replaced with\n","X = torch.linalg.solve(A, B) (Triggered internally at  ../aten/src/ATen/native/BatchLinearAlgebra.cpp:766.)\n","  return _solve_func(B,A)[0][:,0]\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"43hPebU8JGJk","executionInfo":{"status":"ok","timestamp":1639442945062,"user_tz":-540,"elapsed":30,"user":{"displayName":"demore demore","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16558528897465647936"}},"outputId":"f66bda30-ece7-4fe3-ee86-e5c0d0d35058"},"source":["# add test data so that we can make predictions\n","test_image_data = ImageList.from_df(test_df, path=data_path, cols=\"Image Index\",\n","                                    folder=\"test_img_synth\")\n","image_data.add_test(test_image_data)"],"execution_count":23,"outputs":[{"output_type":"execute_result","data":{"text/plain":["LabelLists;\n","\n","Train: LabelList (448 items)\n","x: ImageList\n","Image (3, 128, 128),Image (3, 128, 128),Image (3, 128, 128),Image (3, 128, 128),Image (3, 128, 128)\n","y: CategoryList\n","0,0,1,1,0\n","Path: data/synth_image;\n","\n","Valid: LabelList (112 items)\n","x: ImageList\n","Image (3, 128, 128),Image (3, 128, 128),Image (3, 128, 128),Image (3, 128, 128),Image (3, 128, 128)\n","y: CategoryList\n","1,0,0,0,0\n","Path: data/synth_image;\n","\n","Test: LabelList (140 items)\n","x: ImageList\n","Image (3, 128, 128),Image (3, 128, 128),Image (3, 128, 128),Image (3, 128, 128),Image (3, 128, 128)\n","y: EmptyLabelList\n",",,,,\n","Path: data/synth_image"]},"metadata":{},"execution_count":23}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":162},"id":"dUEfH4kiuCBg","executionInfo":{"status":"ok","timestamp":1639442945062,"user_tz":-540,"elapsed":25,"user":{"displayName":"demore demore","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16558528897465647936"}},"outputId":"aa20e1bd-49e0-4cbd-f937-22b07fcec89a"},"source":["# show one example image\n","print(image_data.train[0][1])\n","image_data.train[0][0]"],"execution_count":24,"outputs":[{"output_type":"stream","name":"stdout","text":["0\n"]},{"output_type":"execute_result","data":{"image/png":"\n","image/jpeg":"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\n","text/plain":["Image (3, 128, 128)"]},"metadata":{},"execution_count":24}]},{"cell_type":"markdown","metadata":{"id":"6qyiolvBLBjB"},"source":["## Taular data\n"]},{"cell_type":"code","metadata":{"id":"VPh3NW7ILAZr","executionInfo":{"status":"ok","timestamp":1639442945063,"user_tz":-540,"elapsed":17,"user":{"displayName":"demore demore","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16558528897465647936"}}},"source":["#Declare vars\n","dep_var = 'labels'\n","# cat_names = ['Patient Gender', 'View Position']\n","# cont_names = ['Follow-up','Patient Age','OriginalImagePixelSpacingx','OriginalImagePixelSpacingy']\n","procs = [FillMissing, Categorify, Normalize]"],"execution_count":25,"outputs":[]},{"cell_type":"code","metadata":{"id":"bVHFiDxCuCEJ","executionInfo":{"status":"ok","timestamp":1639442945063,"user_tz":-540,"elapsed":17,"user":{"displayName":"demore demore","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16558528897465647936"}}},"source":["#Tabular data train\n","tab_data = (TabularList.from_df(train_df, path=data_path, procs=procs)\n","                           .split_by_idx(val_idx)\n","                           .label_from_df(cols=dep_var))\n"],"execution_count":26,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"80sFpVzpL31h","executionInfo":{"status":"ok","timestamp":1639442945063,"user_tz":-540,"elapsed":16,"user":{"displayName":"demore demore","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16558528897465647936"}},"outputId":"733e7d11-dedf-4755-8711-fefa450a4324"},"source":["#Tabular data test\n","tab_data.add_test(TabularList.from_df(test_df,\n","                                      processor = tab_data.train.x.processor))"],"execution_count":27,"outputs":[{"output_type":"execute_result","data":{"text/plain":["LabelLists;\n","\n","Train: LabelList (448 items)\n","x: TabularList\n",",,,,\n","y: CategoryList\n","0,0,1,1,0\n","Path: data/synth_image;\n","\n","Valid: LabelList (112 items)\n","x: TabularList\n",",,,,\n","y: CategoryList\n","1,0,0,0,0\n","Path: data/synth_image;\n","\n","Test: LabelList (140 items)\n","x: TabularList\n",",,,,\n","y: EmptyLabelList\n",",,,,\n","Path: data/synth_image"]},"metadata":{},"execution_count":27}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"yYZE-pjoMDsJ","executionInfo":{"status":"ok","timestamp":1639442945064,"user_tz":-540,"elapsed":13,"user":{"displayName":"demore demore","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16558528897465647936"}},"outputId":"d4b5adde-2b52-4097-ddda-a1c4e3d0b2af"},"source":["# show one example\n","tab_data.train[0]"],"execution_count":28,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(TabularLine [tensor(0), tensor(0)], Category 0)"]},"metadata":{},"execution_count":28}]},{"cell_type":"code","metadata":{"id":"MMLTS--uMITE","executionInfo":{"status":"ok","timestamp":1639442945547,"user_tz":-540,"elapsed":493,"user":{"displayName":"demore demore","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16558528897465647936"}}},"source":["#Integrate image and tabular data\n","integrate_train, integrate_valid, integrate_test = get_imagetabdatasets(image_data, tab_data)"],"execution_count":29,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"0vQukqvlPQUZ","executionInfo":{"status":"ok","timestamp":1639442945549,"user_tz":-540,"elapsed":13,"user":{"displayName":"demore demore","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16558528897465647936"}},"outputId":"07742aae-7838-476a-944e-1c3526cb2a27"},"source":["# package train, valid, and test datasets into a fastai databunch\n","bs = 16\n","\n","db = DataBunch.create(integrate_train, integrate_valid, integrate_test,\n","                      path=data_path, bs=bs)\n","db"],"execution_count":30,"outputs":[{"output_type":"execute_result","data":{"text/plain":["DataBunch;\n","\n","Train: <image_tabular.dataset.ImageTabDataset object at 0x7f77338e3a50>;\n","\n","Valid: <image_tabular.dataset.ImageTabDataset object at 0x7f77338e3a90>;\n","\n","Test: <image_tabular.dataset.ImageTabDataset object at 0x7f77338e3ad0>"]},"metadata":{},"execution_count":30}]},{"cell_type":"code","metadata":{"id":"CyFwcb8TPQXE","executionInfo":{"status":"ok","timestamp":1639442945550,"user_tz":-540,"elapsed":11,"user":{"displayName":"demore demore","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16558528897465647936"}}},"source":["# image normalization with imagenet_stats\n","db.norm, db.denorm = normalize_funcs_image_tab(*imagenet_stats)\n","db.add_tfm(db.norm)"],"execution_count":31,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"vYkmE_TfPQZb","executionInfo":{"status":"ok","timestamp":1639442951817,"user_tz":-540,"elapsed":6277,"user":{"displayName":"demore demore","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16558528897465647936"}},"outputId":"168f5220-9c7b-4b1f-fd07-2a5b5b410ea4"},"source":["# check the shape of one batch\n","x, y = next(iter(db.train_dl))\n","len(x)"],"execution_count":32,"outputs":[{"output_type":"execute_result","data":{"text/plain":["2"]},"metadata":{},"execution_count":32}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"URWihtRlPQca","executionInfo":{"status":"ok","timestamp":1639442951818,"user_tz":-540,"elapsed":43,"user":{"displayName":"demore demore","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16558528897465647936"}},"outputId":"df9f15df-2f49-4d98-897c-56582030e31f"},"source":["# images\n","x[0].shape"],"execution_count":33,"outputs":[{"output_type":"execute_result","data":{"text/plain":["torch.Size([16, 3, 128, 128])"]},"metadata":{},"execution_count":33}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"JmwIWSXoPQfi","executionInfo":{"status":"ok","timestamp":1639442951819,"user_tz":-540,"elapsed":40,"user":{"displayName":"demore demore","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16558528897465647936"}},"outputId":"7d55967b-fc59-4855-afa1-aa0a61988539"},"source":["# categorical and continuous tabular data \n","x[1][0].shape, x[1][1].shape"],"execution_count":34,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(torch.Size([16]), torch.Size([16]))"]},"metadata":{},"execution_count":34}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Sec1jnRzPQiR","executionInfo":{"status":"ok","timestamp":1639442951819,"user_tz":-540,"elapsed":33,"user":{"displayName":"demore demore","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16558528897465647936"}},"outputId":"427b7be6-e2bf-4eda-cc7e-01903be52830"},"source":["# targets\n","y.shape"],"execution_count":35,"outputs":[{"output_type":"execute_result","data":{"text/plain":["torch.Size([16])"]},"metadata":{},"execution_count":35}]},{"cell_type":"code","metadata":{"id":"-nngKA3CPw1K","executionInfo":{"status":"ok","timestamp":1639442951819,"user_tz":-540,"elapsed":26,"user":{"displayName":"demore demore","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16558528897465647936"}}},"source":["#Model that trains on image and tabular data simultaneously\n","# cnn model for images, use Resnet50 as an example\n","cnn_arch = models.densenet121\n","\n"],"execution_count":36,"outputs":[]},{"cell_type":"code","metadata":{"id":"ZG48n-Y0P80r","executionInfo":{"status":"ok","timestamp":1639442951820,"user_tz":-540,"elapsed":26,"user":{"displayName":"demore demore","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16558528897465647936"}}},"source":["# cnn_out_sz is the output size of the cnn model that will be concatenated with tabular model output\n","cnn_out_sz = 256\n","\n"],"execution_count":37,"outputs":[]},{"cell_type":"code","metadata":{"id":"swGU_cNOP9D3"},"source":["# use fastai functions to get a cnn model\n","image_data_db = image_data.databunch()\n","image_data_db.c = cnn_out_sz\n","cnn_learn = cnn_learner(image_data_db, cnn_arch, ps=0.2)\n","cnn_model = cnn_learn.model"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"j9n0df--QK_I"},"source":["# get embedding sizes of categorical data\n","emb_szs = tab_data.train.get_emb_szs()\n","\n","# output size of the tabular model that will be concatenated with cnn model output\n","tab_out_sz = 8\n","\n","# use fastai functions to get a tabular model\n","tabular_model = TabularModel(emb_szs, n_cont=0, out_sz=tab_out_sz, layers=[8], ps=0.2)\n","tabular_model"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"rFNjATyXQlQq"},"source":["# get an integrated model that combines the two components and concatenate their outputs\n","# which will pass through additional fully connected layers\n","integrate_model = CNNTabularModel(cnn_model,\n","                                  tabular_model,\n","                                  layers = [cnn_out_sz + tab_out_sz, 32],\n","                                  ps=0.2,\n","                                  out_sz=2).to(device)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"OcflmconQovZ"},"source":["# check model output dimension, should be (bs, 2)\n","integrate_model(*x).shape"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"U4dsIg5XQydi"},"source":["# adjust loss function weight because the dataset is extremely unbalanced\n","weights = [1/(1-train_df[\"labels\"].mean()), 1/train_df[\"labels\"].mean()]\n","loss_func = CrossEntropyFlat(weight=torch.FloatTensor(weights).to(device))"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"-YLBE_WjQ5FI"},"source":["# package everything in a fastai learner, add auc roc score as a metric\n","learn = Learner(db, integrate_model, metrics=[accuracy, ROCAUC()], loss_func=loss_func)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"cs4kjKh2Q_K5"},"source":["# organize layer groups in order to use differential learning rates provided by fastai\n","# the first two layer groups are earlier layers of resnet\n","# the last layer group consists of the fully connected layers of cnn model, tabular model,\n","# and final fully connected layers for the concatenated data\n","learn.layer_groups = [nn.Sequential(*flatten_model(cnn_learn.layer_groups[0])),\n","                      nn.Sequential(*flatten_model(cnn_learn.layer_groups[1])),\n","                      nn.Sequential(*(flatten_model(cnn_learn.layer_groups[2]) +\n","                                      flatten_model(integrate_model.tabular_model) +\n","                                      flatten_model(integrate_model.layers)))]"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"9eg92dZyRCyA"},"source":["# find learning rate to train the last layer group first \n","learn.freeze()\n","learn.lr_find()\n","learn.recorder.plot(suggestion = True)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"ugeB1rjBrePx"},"source":["#Access learning exact learning rate\n","min_grad_lr = learn.recorder.min_grad_lr\n","min_grad_lr"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"3YxST4tQXvev"},"source":["# train\n","learn.fit_one_cycle(5, 1e-7)\n","learn.recorder.plot_metrics()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"QXLUM6lndZxt"},"source":["# unfreeze all layer groups to train the entire model using differential learning rates\n","learn.unfreeze()\n","learn.fit_one_cycle(5, slice(1e-6, 1e-3))"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"vTQfwX0mjuKr"},"source":["## Prediction\n","\n"]},{"cell_type":"code","metadata":{"id":"a4P-5ueujtDj"},"source":["# make predictions for the test set\n","preds, y = learn.get_preds(DatasetType.Test)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"IiRC3Y4ulNSk"},"source":["preds, y"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"4U63s8DmYy62"},"source":["#\n","learn.show_results()"],"execution_count":null,"outputs":[]}]}